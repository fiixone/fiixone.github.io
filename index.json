[{"content":"Nssm-创建Win服务 Nssm 是一个小巧 / 功能齐全 / 免安装的Windows 服务创建工具\n官方地址: https://nssm.cc/\n下载地址: https://nssm.cc/download\nLatest release 支持win2000/win7/8/10(包含32/64位版本)\n一. 下载配置 ​\t访问 https://nssm.cc/release/nssm-2.24.zip 下载.\n​\t当然将文件解压到指定目录,并将文件路径添加到系统变量最好,方便后期增加其他服务. 也可以在nssm.exe 文件所在目录使用 Shift + 鼠标右键 在终端打开.\n​\t如下添加到系统环境变量 右键我的电脑 - 属性 - 高级系统设置 - 高级 - 环境变量\n​\t最好添加到系统变量,多用户可以使用.\n二. 命令详解 更使用方法请查看 官方教程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 NSSM: The non-sucking service manager Version 2.24 64-bit, 2014-08-31 Usage: nssm \u0026lt;option\u0026gt; [\u0026lt;args\u0026gt; ...] 使用图形界面安装服务: nssm install [\u0026lt;servicename\u0026gt;] 直接安装服务: nssm install \u0026lt;servicename\u0026gt; \u0026lt;app\u0026gt; [\u0026lt;args\u0026gt; ...] 使用图形界面编辑服务: nssm edit \u0026lt;servicename\u0026gt; 直接检索或编辑服务参数: nssm get \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] nssm set \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] \u0026lt;value\u0026gt; nssm reset \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] 使用图形界面删除服务: nssm remove [\u0026lt;servicename\u0026gt;] 直接强制删除服务: nssm remove \u0026lt;servicename\u0026gt; confirm 管理服务: 启动服务 nssm start \u0026lt;servicename\u0026gt; 停止服务 nssm stop \u0026lt;servicename\u0026gt; 重启服务 nssm restart \u0026lt;servicename\u0026gt; 查看服务状态 nssm status \u0026lt;servicename\u0026gt; 输出日志轮换 nssm rotate \u0026lt;servicename\u0026gt; 三. 使用实例(frp/Nginx) 1. 创建frp server 1 2 3 4 Application: Path: 执行文件路径 Startup directory: 启动文件夹(默认为执行文件所在路径) Arguments: 其他参数(可自行根据情况添加) 1 2 3 I/0: Output (stdout):\t正常输出保存位置 Error (stderr):\t错误输出保存位置 2. 创建nginx server 3. 启动服务并查看状态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 C:\\\u0026gt;nssm install frp Service \u0026#34;frp\u0026#34; installed successfully! C:\\\u0026gt;nssm install nginx Service \u0026#34;nginx\u0026#34; installed successfully! C:\\\u0026gt;nssm start nginx nginx: START: 操作成功完成。 C:\\\u0026gt;nssm start frp frp: START: 操作成功完成。 C:\\\u0026gt;nssm status nginx SERVICE_RUNNING C:\\\u0026gt;nssm status frp SERVICE_RUNNING C:\\\u0026gt; 至此,已经通过frp完成内网穿透.可进行测试.服务运行.\n4. 查看系统启动服务 win + r 输入 msconfig\n如上图所示, frp/nginx服务已经添加.\n5. 重启后测试远程访问 ","description":"Nssm下载配置|创建windows服务","id":0,"section":"docs","tags":null,"title":"Nssm-创建Win服务","uri":"https://fiix.one/docs/os/windows/nssm%E4%B8%8B%E8%BD%BD%E9%85%8D%E7%BD%AE/"},{"content":"Windows修改cmd默认路径 一. 打开注册表指定位置 win + r 输入 regedit\n打开到计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Command Processor\n二. 新建值 ​\tautorun\n三. 修改数据 ​\tcd /d C:\\\n四. 重新打开CMD控制台即生效 ","description":"Windows修改cmd默认路径","id":1,"section":"docs","tags":null,"title":"Windows修改cmd默认路径","uri":"https://fiix.one/docs/os/windows/windows%E4%BF%AE%E6%94%B9cmd%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/"},{"content":"硬盘热插拔 在Centos 7生产环境使用过程中,常常需要对数据做冷备,服务器需要避免重启,直接拔插硬盘系统无法识别.可使用如下方法解决:\n一. 手动识别扫描硬盘 重新扫描总线\n1 2 # 建议直接使用下方 for 循环语句 echo \u0026#39;- - -\u0026#39; \u0026gt; /sys/class/scsi_host/host0/scan 1 2 3 # /sys/class/scsi_host/ 目录下可能有多个如:host0 host1 host2 # 可以直接使用 for 循环扫描 for i in /sys/class/scsi_host/host*/scan;do echo \u0026#34;- - -\u0026#34; \u0026gt;$i;done 执行完成后. /dev/中应该已经识别了所需硬盘设备,可进行挂载备份文件.\n二. 删除/dev/sd*的设备 以下两个方法都行\n重新扫描整个总线\n1 for i in /sys/class/scsi_host/host*/scan;do echo \u0026#34;- - -\u0026#34; \u0026gt;$i;done 单独删除设备\n1 2 3 # echo 1 \u0026gt; /sys/block/[your-devname]/device/delete # 假设设备为 /dev/sdx echo 1 \u0026gt; /sys/block/sdx/device/delete ","description":"Centos sata 硬盘 热插拔","id":2,"section":"docs","tags":null,"title":"硬盘热插拔","uri":"https://fiix.one/docs/os/centos/%E7%A1%AC%E7%9B%98%E7%83%AD%E6%8F%92%E6%8B%94/"},{"content":"IPFS 安装 项目地址: https://github.com/ipfs/go-ipfs/\n官方文档: https://docs.ipfs.io/ [GFW\u0026hellip;]\n个人部署: https://ipfs-doc.fiix.one [基于cf+ipfs网络分发]\nIPNS地址: /ipns/ipfs-doc.fiix.one [自行选择支持的网关]\n一. 一键安装 适配架构amd64/arm64/arm/386 1 curl -sL https://sh.fiix.one/ipfs_install.sh | sudo bash - 二. Bash自动补齐 1 source /etc/bash_completion.d/ipfs 如提示报错 1 2 [root@ipfs ~]# source /etc/bash_completion.d/ipfs bash: complete: nosort: 无效的选项名 修复方法 1 vim /etc/bash_completion.d/ipfs 将文件最后一行中的-o nosort 去除 1 2 #complete -o nosort -o nospace -o default -F _ipfs ipfs complete -o nospace -o default -F _ipfs ipfs 重新执行 1 source /etc/bash_completion.d/ipfs 三. 配置IPFS运行用户/文件路径 IPFS默认文件路径为/root/.ipfs/\n1. 停止ipfs daemon 进程 1 systemctl stop ipfs-daemon 2. 转移ipfs 配置及文件 演示路径为/srv/ipfs 1 2 3 sudo mv /root/.ipfs/ /srv/ipfs/ ## 更改自定义用户 sudo chown your-user: /srv/ipfs 3. 编辑ipfs-daemon.service 文件 1 sudo vim /etc/systemd/system/ipfs-daemon.service 文件样本如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 [Unit] Description=IPFS daemon After=network.target [Service] User=root # 如非root用户请自定义 Group=root # 如非root用户请自定义 LimitCPU=infinity LimitFSIZE=infinity LimitDATA=infinity LimitSTACK=infinity LimitCORE=infinity LimitRSS=infinity LimitNOFILE=infinity LimitAS=infinity LimitNPROC=infinity LimitMEMLOCK=infinity LimitLOCKS=infinity LimitSIGPENDING=infinity LimitMSGQUEUE=infinity LimitRTPRIO=infinity LimitRTTIME=infinity Environment=IPFS_PATH=/srv/ipfs/ # 可自定义ipfs根文件储存位置 eg:/srv/ipfs 注意修改权限与上面用户一致 ExecStart=/usr/local/bin/ipfs daemon --enable-gc --enable-pubsub-experiment Restart=on-failure RestartSec=10 [Install] WantedBy=multi-user.target 执行 1 2 sudo systemctl daemon-reload sudo systemctl start ipfs-daemon 添加到环境变量 1 2 sudo echo \u0026#39;IPFS_PATH=\u0026#34;/srv/ipfs/\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/environment source /etc/environment 四. 防火墙放行/端口转发 在路由器端配置公网4001 tcp/udp 转发至服务器主机4001 tcp/udp 1 2 3 sudo firewall-cmd --zone=public --add-port=4001/tcp --permanent sudo firewall-cmd --zone=public --add-port=4001/udp --permanent sudo firewall-cmd --reload 如需对外或内网设备提供网关功能/开启API等操作 需酌情开启端口转发及服务器防火墙端口5001/API /8080/Gateway 注意: 需配置$IPFS_PATH/config文件中的相关选项 ","description":"IPFS安装|配置","id":3,"section":"docs","tags":null,"title":"IPFS安装","uri":"https://fiix.one/docs/blockchain/ipfs/ipfs%E5%AE%89%E8%A3%85/"},{"content":"Nvidia 驱动安装后提示警告 系统版本: Ubuntu 20.04.3 LTS\n驱动版本: NVIDIA-Linux-x86_64-460.67.run\n警告提示:W: Possible missing firmware /lib/firmware/ast_dp501_fw.bin for module ast 1 2 3 [Work-1]~$ sudo update-initramfs -u update-initramfs: Generating /boot/initrd.img-5.4.0-81-generic W: Possible missing firmware /lib/firmware/ast_dp501_fw.bin for module ast 解决方法一 1 2 3 4 5 6 7 8 9 10 [Work-1]~$ curl -O http://cdn.fiix.one/lotus/ast_dp501_fw.bin.gz % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 6631 100 6631 0 0 9838 0 --:--:-- --:--:-- --:--:-- 9823 [Work-1]~$ gzip -d ast_dp501_fw.bin.gz [Work-1]~$ sudo mv ./ast_dp501_fw.bin /lib/firmware/ [sudo] password for fil: [Work-1]~$ sudo update-initramfs -u update-initramfs: Generating /boot/initrd.img-5.4.0-81-generic [Work-1]~$ 解决方法二 创建空文件即可\n1 2 sudo touch /lib/firmware/ast_dp501_fw.bin sudo update-initramfs -u ","description":"W: Possible missing firmware /lib/firmware/ast_dp501_fw.bin for module ast","id":4,"section":"docs","tags":null,"title":"Nvidia驱动安装后提示警告","uri":"https://fiix.one/docs/os/nvidia%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85%E5%90%8E%E6%8F%90%E7%A4%BA%E8%AD%A6%E5%91%8A/"},{"content":"Filecoin存储i/o性能分析，网络分析 一. 存储i/o性能分析 Filecoin挖矿的过程中存储性能至关重要，当存储性能无法满足要求时，会出现封装期间不断掉算力的窘境。\n存储性能测试 对存储性能进行测试可直接对Miner机器上的存储挂载路径使用fio进行测试。\n安装fio\nsudo apt-get install fio fio测试场景 #100%随机，100%读， 4K fio -filename=/dev/emcpowerb -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=rand_100read_4k #100%随机，100%写， 4K fio -filename=/dev/emcpowerb -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=rand_100write_4k #100%顺序，100%读 ，4K fio -filename=/dev/emcpowerb -direct=1 -iodepth 1 -thread -rw=read -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=sqe_100read_4k #100%顺序，100%写 ，4K fio -filename=/dev/emcpowerb -direct=1 -iodepth 1 -thread -rw=write -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=sqe_100write_4k #100%随机，70%读，30%写 4K fio -filename=/dev/emcpowerb -direct=1 -iodepth 1 -thread -rw=randrw -rwmixread=70 -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=randrw_70read_4k 二. 网络性能分析 Filecoin挖矿过程中网络架构的设计会对整个集群的封装效率和WindPost产生影响，服务器间的网络性能可以通过iperf3进行测试。\n在需要进行测试的服务器上安装iperf3\nsudo apt-get install iperf3 在一台Server服务器上运行（可选择Miner机作为Server机器，方便测试各个存储机与Miner机之间的网络性能）\niperf3 -s 在客户端服务器上运行（可以选择存储机作为客户端）\niperf3 -c 192.168.1.2 -t 10 #该ip为Server服务器内网ip\n可以根据网络测试结果来对封装期间写入存储的数据量进行调整，防止出现因为封装数据写入存储机过大占满Miner和存储机之间的网络传输带宽，此时若进行WindPost则可能会导致Miner机与存储之间无足够的带宽进行数据读取验证，读取超时丢失算力。 ","description":"Filecoin存储i/o性能分析，网络分析","id":5,"section":"docs","tags":null,"title":"Filecoin存储i/o性能分析，网络分析","uri":"https://fiix.one/docs/blockchain/lotus/filecoin%E5%AD%98%E5%82%A8io%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"},{"content":"Lotus-Miner初始化 一.环境变量配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # rustup 环境 # source \u0026#34;$HOME/.cargo/env\u0026#34; # Go 环境变量 export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin # Go 中国区加速 export GOPROXY=https://goproxy.cn # 证明参数-中国区加快首次启动时的下载IPFS加速 export IPFS_GATEWAY=https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/ export FIL_PROOFS_PARAMETER_CACHE=/srv/cache/FIL_PROOFS_PARAMETER_CACHE export FIL_PROOFS_PARENT_CACHE=/srv/cache/FIL_PROOFS_PARENT_CACHE # 打开的文件限制并确保它至少设置为10000000 ulimit -n 1000000 export LOTUS_DISABLE_WATCHDOG=1 export TMPDIR=/srv/cache/seal # Used when sealing.临时文件夹路径，用于存放显卡锁定文件 # Lotus Daemon 配置 # export LOTUS_PATH=$HOME/.lotus # lotus daemon 路径 # Miner 配置 export LOTUS_MINER_PATH=$HOME/.lotusminer/ # lotus miner 路径 #export LOTUS_STORAGE_PATH=$HOME/.lotusminer # # export BELLMAN_CUSTOM_GPU= # 指定GPU型号 #export FULLNODE_API_INFO=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJyZWFkIiwid3JpdGUiXX0:/ip4/127.0.0.1/tcp/1234/http export RUST_LOG=Trace # Work 配置 #export LOTUS_WORKER_PATH=/srv/data # Lotus worker 路径 #export BELLMAN_CPU_UTILIZATION=0.95 # CPU使用率 export FIL_PROOFS_USE_MULTICORE_SDR=1 # PreCommit1多CPU核心绑定 export FIL_PROOFS_MAXIMIZE_CACHING=1 # PreCommit1开启内存最大化 export FIL_PROOFS_USE_GPU_COLUMN_BUILDER=0 # 使用GUP计算Precommit2 COLUMN hash. export FIL_PROOFS_USE_GPU_TREE_BUILDER=0 # GPU计算Precommit2 TREE hash. # export BELLMAN_CUSTOM_GPU=\u0026#34;GeForce RTX 2080 Ti:4352\u0026#34; # 指定Commit2的GPU型号 二.矿工初始化及启动 主网，如果旷工不想开启接单功能（接单会有很多坑，谨慎开启），单纯的挖矿（靠质押扇区增加算力，然后靠出块获取收益），则不需要配备 公网 IP 地址。运行本地测试网也不需要有公网 IP 地址（包括本地测试网的接单功能）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 矿工初始化 # 32GiB/64GiB可自行配置 lotus-miner init --no-local-storage --owner=f3xxxxxxxxxxxxx --worker=f3xxxxxxxxxxx --sector-size=32GiB # 启动矿工 nohup lotus-miner run \u0026gt; ~/log/lotus-miner.log 2\u0026gt;\u0026amp;1 \u0026amp; # 查看消息池 lotus mpool pending --local # 上次基础BaseFee费用 lotus chain head | xargs lotus chain getblock | jq -r .ParentBaseFee # 修改消息池费用 lotus mpool replace --gas-feecap 1260548422 --gas-premium 200000000 f3vrv3krhk7ozfmiumj4jzlnijs55mpce5bvl5uoaojz7f5zpxecikehmcli7yvrjb6qpacqil6bv4smnbvpuq # 清除消息池 lotus mpool clear --really-do-it 三.矿工状态查询及操作 增加算力的其中一个方式就是质押扇区（当然也可以通过接收订单来增加算力）\na. WaitSeed 表示该扇区正在等待链上的消息，准备让扇区的数据上链（PreCommitSector 的信息）\nb. PreCommitSector 消息上链之后，miner 会继续做 C1 和 C2，做完之后，还需要有另一条消息上链：ProveCommitSector，这两条消息都上链之后（这两条消息都是需要收钱的，包括燃烧掉的 gas 费用和质押费用， 其中， gas 费用永久消耗，质押费用等扇区生命周期结束之后会退回），就可以看到该扇区的状态变成 Proving 了\nc. 使用命令 lotus-miner sectors list 可以查看到该扇区的 OnChain 选项已经是 YES 了，但是它的 Active 选项依然还是 NO，等 miner 做完一次 WindowsPoST 之后（需要向链上发送一条 SubmitWindowedPoSt 消息，目前该消息已经基本不收费了）， Active 选项才会变成 YES。\n等了一段时间，所有消息都成功上链，可以看到 Active 状态变成 Yes 了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 质押一个随机数据的扇区，开始密封 lotus-miner sectors pledge # 查看旷工状态 lotus-miner info # 查看扇区 ID，获取扇区列表 lotus-miner sectors list # 查看具体的某个扇区的状态（示例中显示的是扇区 0 的状态） # 一个分区中的最大扇区数为2349。这意味着您已在截止时间0到达了第一个分区的最大限制。现在它将开始在截止时间1填充该分区。 lotus-miner sectors status 0 # 查看 0 号扇区的详细日志信息 lotus-miner sectors status --log 0 # 删除扇区 lotus-miner sectors remove --really-do-it # 查看Worker lotus-miner sealing workers # 查询当前集群的任务分配情况： lotus-miner sealing jobs #证明时间 lotus-miner proving deadlines # 模拟证明区块状态 lotus-miner proving check 0 # 提交扇区所需时间 PC1 3h PC2 40M C1 C2 2h10M 1h20M\t4h 25M 1h10M 四.创建Token,集群部署需要此配置 1 2 3 4 5 6 7 # 创建lotus-Token ~$ lotus auth create-token --perm admin eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJyZWFkIiwid3JpdGUiXX0.RKzJF7CVkFi4Ck3obwu0f7R62kqLKZcNk02ydtRgb3M # 创建lotus-miner-Token ~$ lotus-miner auth create-token --perm admin eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJyZWFkIiwid3JpdGUiLCJzaWduIiwiYWRtaW4iXX0.ZDESMziam3Fvue5pHmXeUTHbheEdpZO-oLvoFcRbZdM 1 2 3 4 5 # 根据需求更改配置Worker地址 ~$ lotus-miner actor propose-change-worker --really-do-it f3rvkj4cvbdfft6dmgcn37br5mfnqbz4perixbphazkgcd5dukysskjbek6ypr7iviiqcaugxihtxib5chrrza Propose Message CID: bafy2bzacecetwa3v4kyukdez6bcog33x7b5uzca4nzmvnid6tjfixvgwbc52c Worker key change to f3rvkj4cvbdfft6dmgcn37br5mfnqbz4perixbphazkgcd5dukysskjbek6ypr7iviiqcaugxihtxib5chrrza successfully proposed. Call \u0026#39;confirm-change-worker\u0026#39; at or after height 691666 to complete. ","description":"Lotus-Miner初始化","id":6,"section":"docs","tags":null,"title":"Lotus-Miner初始化","uri":"https://fiix.one/docs/blockchain/lotus/lotus-miner%E5%88%9D%E5%A7%8B%E5%8C%96/"},{"content":"Lotus Miner配置存储位置 如果--no-local-storage在矿工初始化期间使用了该标志，则应指定用于密封（建议使用快速SSD）和长期存储的磁盘位置。\nIf you used the --no-local-storage flag during the miner initialization, you should specify the disk locations for sealing (fast SSD recommended) and long-term storage.\nLotus Miner跟踪in ~/.lotusminer/storage.json（或$LOTUS_MINER_PATH/storage.json）中已定义的存储位置，并使用~/.lotusminerpath作为缺省值。\nThe Lotus Miner keeps track of defined storage locations in in ~/.lotusminer/storage.json (or $LOTUS_MINER_PATH/storage.json) and uses ~/.lotusminer path as default.\n初始化存储位置后，将\u0026lt;path-to-storage\u0026gt;/sectorstorage.json创建一个文件，其中包含分配给该位置的UUID，以及该文件是否可用于密封或存储。\nUpon initialization of a storage location, a \u0026lt;path-to-storage\u0026gt;/sectorstorage.json file is created that contains the UUID assigned to this location, along with whether it can be used for sealing or storing.\n一.自定义seal位置 所述密封件密封扇区时存储位置被使用。它应该是一种真正快速的存储介质，以使磁盘不会成为延迟密封过程的瓶颈。可以通过以下方式指定：\nThe seal storage location is used when sealing sectors. It should be a really fast storage medium so that the disk does not become the bottleneck that delays the sealing process. It can be specified with:\n1 lotus-miner storage attach --init --seal \u0026lt;PATH_FOR_SEALING_STORAGE\u0026gt; 二.自定义store位置 一旦密封过程完成后，密封扇区被移动到存储位置，该位置可被指定为如下：\nOnce the sealing process is completed, sealed sectors are moved to the store location, which can be specified as follow:\n1 lotus-miner storage attach --init --store \u0026lt;PATH_FOR_LONG_TERM_STORAGE\u0026gt; 该位置可以由大容量的磁盘组成，尽管速度较慢。\nThis location can be made of large capacity, albeit slower, spinning-disks.\n三. 存储路径操作 1. 更改默认存储路径 export LOTUS_MINER_PATH=\u0026quot;/path/to/.lotusminer\u0026quot;\nMiner 默认存储路径是 ~/.lotusminer，可通过指定 LOTUS_MINER_PATH 环境变量来更改； $LOTUS_MINER_PATH 目录下的 storage.json 文件，用来定义Miner挂载的所有存储路径，例如： 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;StoragePaths\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;/home/ubuntu/disk_md0/lotusminer\u0026#34; }, { \u0026#34;Path\u0026#34;: \u0026#34;/home/ubuntu/sectors/storage0\u0026#34; }, { \u0026#34;Path\u0026#34;: \u0026#34;/home/ubuntu/sectors/storage1\u0026#34; } ] } 其中/home/ubuntu/disk_md0/lotusminer为Miner本地Worker的存储路径；\n/home/ubuntu/sectors/storage0和/home/ubuntu/sectors/storage1都是新增的用来存储密封结果的路径。\n每个存储路径下都会有 sectorstore.json 配置文件，用来配置该存储路径的用途。\n1 2 3 4 5 6 { \u0026#34;ID\u0026#34;: \u0026#34;83b4fc88-283a-4496-a2f9-cf10781c4ec3\u0026#34;, # 唯一标识ID \u0026#34;Weight\u0026#34;: 10, # 该存储路径权重 \u0026#34;CanSeal\u0026#34;: true, # 是否可以用来存储密封过程中生成的临时文件 \u0026#34;CanStore\u0026#34;: true # 是否可以用来存储密封好的数据 } 其中需要注意的3个参数是：\nWeight: 该存储路径的权重，权重越大的路径会优先存数据； CanSeal: 是否可以用来存储密封过程中生成的临时文件; CanStore: 是否可以用来存储密封好的数据，Miner本地Worker的CanStore要设置为false，Seal Worker的CanStore默认就是false; 2. 多个存储路径管理 当Miner挂载多个存储路径时，需要对多个存储路径进行管理时，可以手动对每个存储路径下的sectorstore.json配置文件进行修改权重的配比和存储路径的用途管理。当多个存储路径配置不同的权重时，Miner会根据各个存储路径的权重配比进行存储。若某一存储路径快满时，可以设置该路径下的sectorstore.json中\u0026quot;CanSeal\u0026quot;: false、 \u0026quot;CanStore\u0026quot;: false，这样Miner就不会往该路径下存储任何数据了。\n3.列出存储位置 1 lotus-miner storage list 四.更新位置 要将数据从一个位置移动到另一位置，请遵循Miner生命周期指南中的说明。\n要完全删除一个位置，请storage.json手动编辑并重新启动矿机。\n","description":"Lotus-Miner配置存储位置","id":7,"section":"docs","tags":null,"title":"Lotus-Miner配置存储位置","uri":"https://fiix.one/docs/blockchain/lotus/lotus-miner%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"},{"content":"Lotus 安装配置 一.Ubuntu 20.04.2初始设置 1.配置阿里源 http://mirrors.aliyun.com/\n2.卸载snapd 1 2 3 4 5 6 $ snap list $ snap remove lxd $ snap remove core18 $ snap remove snapd $ sudo apt-get remove snapd --purge\t# 卸载snapd $ sudo apt-get autoremove --purge # 卸载无用的squashfs-tools 二.编译环境安装 1.基础编译环境 1 2 $ sudo apt install mesa-opencl-icd ocl-icd-opencl-dev gcc git bzr jq pkg-config curl clang build-essential hwloc libhwloc-dev wget -y $ sudo apt-get upgrade -y 2.环境变量配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # rustup 环境 source \u0026#34;$HOME/.cargo/env\u0026#34; # Go 环境变量 export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin # Go 中国区加速 export GOPROXY=https://goproxy.cn # 证明参数-中国区加快首次启动时的下载IPFS加速 export IPFS_GATEWAY=https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/ export FIL_PROOFS_PARAMETER_CACHE=/srv/FIL_PROOFS_PARAMETER_CACHE export FIL_PROOFS_PARENT_CACHE=/srv/FIL_PROOFS_PARENT_CACHE # 打开的文件限制并确保它至少设置为10000000 ulimit -n 1000000 # 其他配置 export BELLMAN_CPU_UTILIZATION=0.95 # CPU使用率 export FIL_PROOFS_MAXIMIZE_CACHING=1 export FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1 # When having GPU. export FIL_PROOFS_USE_GPU_TREE_BUILDER=1 # When having GPU. 3.Rust 安装及软件包镜像配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 开始安装 # 安装包加速镜像 $ export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static $ export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup # 其他 # 清华大学 RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup # 中国科学技术大学 RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup # 上海交通大学 RUSTUP_DIST_SERVER=https://mirrors.sjtug.sjtu.edu.cn/rust-static/ $ curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh $ source $HOME/.cargo/env $ rustup default nightly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 软件包国内镜像源 $ mkdir -p $HOME/.cargo $ vim $HOME/.cargo/config [source.crates-io] registry = \u0026#34;https://github.com/rust-lang/crates.io-index\u0026#34; replace-with = \u0026#39;rustcc\u0026#39; # rustcc社区 [source.rustcc] registry=\u0026#34;git://crates.rustcc.com/crates.io-index\u0026#34; [source.rustcc2] registry=\u0026#34;git://crates.rustcc.cn/crates.io-index\u0026#34; # 清华大学 [source.tuna] registry = \u0026#34;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\u0026#34; # 中国科学技术大学 [source.ustc] registry = \u0026#34;git://mirrors.ustc.edu.cn/crates.io-index\u0026#34; # 上海交通大学 [source.sjtu] registry = \u0026#34;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index\u0026#34; #### 如果编译源码的时候报错Updating crates.io index，是因为无法加载crate.io源，是并发下载的问题，可以重新编译下载。\n4.Golang编译环境安装 官方一键安装命令\nwget -c https://golang.org/dl/go1.16.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local\nwget -c https://golang.google.cn/dl/go1.16.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local\na). 下载Golang安装包 1 2 3 4 5 # 下载golang安装包\t$ wget -c https://golang.org/dl/go1.16.linux-amd64.tar.gz # 国内加速 $ wget -c https://golang.google.cn/dl/go1.16.linux-amd64.tar.gz $ tar -xvf go1.16.linux-amd64.tar.gz b). 安装 1 2 3 $ sudo chown -R root:root ./go $ sudo rm -rfv /usr/local/go $ sudo mv go /usr/local/ c). Go环境变量 1 2 3 4 5 6 7 $ echo \u0026#34;GOPATH=$HOME/go\u0026#34; \u0026gt;\u0026gt; $HOME/.profile $ echo \u0026#34;export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin\u0026#34; \u0026gt;\u0026gt; $HOME/.profile # 配置国内goproxy代理 $ echo \u0026#34;export GOPROXY=https://goproxy.cn\u0026#34; \u0026gt;\u0026gt; $HOME/.profile # 使环境变量生效 $ source $HOME/.profile d). 查看验证golang版本 1 $ go version 三.开始编译安装 1.下载源码 1 2 3 # 以下任意皆可，第二个国内镜像能快点 $ git clone https://github.com/filecoin-project/lotus.git $ git clone https://github.com.cnpmjs.org/filecoin-project/lotus.git 配置子模块镜像加速\n1 2 3 4 5 # 手动修改.gitmodules为镜像地址https://hub.fastgit.org/或者https://github.com.cnpmjs.org cd lotus vim .gitmodules # 运行git submodule sync 同步新配置到.git/config git submodule update --init --recursive 1 2 3 4 5 6 # 根据情况切换分支 git checkout \u0026lt;branch_or_tag\u0026gt; # 例如: git checkout master # 主网 git checkout ntwk-calibration # calibration-net git checkout ntwk-nerpa # nerpa-net git分支中有脏状态,编译报错请尝试\ngit checkout \u0026lt;desired_branch\u0026gt;\ngit reset origin/\u0026lt;desired_branch\u0026gt; \u0026ndash;hard\nmake clean\n2.查看扩展指令集支持 1 $ grep \u0026#34;adx\\|sha\u0026#34; /proc/cpuinfo 启用SHA扩展-如果您具有AMD Zen或Intel Ice Lake CPU（或更高版本），请通过添加以下两个环境变量： 1 2 export RUSTFLAGS=\u0026#34;-C target-cpu=native -g\u0026#34; export FFI_BUILD_FROM_SOURCE=1 没有ADX指令支持的较旧的Intel和AMD处理器可能会因非法指令错误而感到恐慌。要解决此问题，请添加CGO_CFLAGS环境变量: 1 2 export CGO_CFLAGS_ALLOW=\u0026#34;-D__BLST_PORTABLE__\u0026#34; export CGO_CFLAGS=\u0026#34;-D__BLST_PORTABLE__\u0026#34; 3.编译安装 1 2 make clean all sudo make install # 安装lotus,lotus-miner,lotus-worker到/usr/local/bin 默认情况下将使用$HOME/.lotus 文件夹进行存储（配置，链数据，钱包等）\n4.安装为System系统服务文件 Lotus提供了通用的Systemd服务文件。它们可以通过以下方式安装：\n1 2 sudo make install-daemon-service sudo make install-miner-service 四.初始配置(CPU性能模式/关闭显卡驱动升级/sudoer) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # CPU performance sudo apt-get install cpufrequtils cpufreq-set -g performance # close upgrade sed -i \u0026#39;s/1/0\u0026#39; /etc/apt/apt.conf.d/10periodic # recreate kernel initramfs update-initramfs -u # disable nvidia update cat \u0026gt;\u0026gt; /etc/modprobe.d/blacklist-nouveau.conf \u0026lt;\u0026lt;EOF blacklist nouveau options nouveau modeset=0 EOF # sudoers config cat \u0026gt;\u0026gt;/etc/sudoers \u0026lt;\u0026lt;EOF fil ALL=(ALL:ALL) ALL EOF ","description":"Lotus编译安装","id":8,"section":"docs","tags":null,"title":"Lotus编译安装","uri":"https://fiix.one/docs/blockchain/lotus/lotus%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"content":"Lotus常用环境变量使用说明 1. 通用环境变量 FIL_PROOFS_PARAMETER_CACHE：proof 证明参数路径，默认在/var/tmp/filecoin-proof-parameters下。\n1 export FIL_PROOFS_PARAMETER_CACHE=/home/user/nvme_disk/filecoin-proof-parameters FFI_BUILD_FROM_SOURCE：从源码编译底层库。\n1 export FFI_BUILD_FROM_SOURCE=1 IPFS_GATEWAY：配置证明参数下载的代理地址。\n1 export IPFS_GATEWAY=https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/ TMPDIR：临时文件夹路径，用于存放显卡锁定文件。\n1 export TMPDIR=/home/user/nvme_disk/tmp RUST_LOG：配置Rust日志级别。\n1 export RUST_LOG=Debug GOPROXY：配置Golang代理。\n1 export GOPROXY=https://goproxy.cn 2. Lotus Deamon环境变量 LOTUS_PATH：lotus daemon 路径，例如： 1 export LOTUS_PATH=/home/user/nvme_disk/lotus 3. Lotus Miner环境变量 LOTUS_MINER_PATH：lotus miner 路径，例如： 1 export LOTUS_MINER_PATH=/home/user/nvme_disk/lotusminer FULLNODE_API_INFO：lotus daemon API 环境变量； 1 export FULLNODE_API_INFO=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJyZWFkIiwid3JpdGUiLCJzaWduIiwiYWRtaW4iXX0.JSdq-OviNQW2dZslvyargJsqgLrlYCjoZCIFkb2u96g:/ip4/192.168.1.10/tcp/1234/http BELLMAN_CUSTOM_GPU：指定GPU型号； 4. Lotus Worker环境变量 LOTUS_WORKER_PATH：Lotus worker 路径；\n1 export LOTUS_WORKER_PATH=/home/user/nvme_disk/lotusworker FIL_PROOFS_MAXIMIZE_CACHING：最大化内存参数；\n1 export FIL_PROOFS_MAXIMIZE_CACHING=1 FIL_PROOFS_USE_MULTICORE_SDR：CPU多核心绑定；\n1 export FIL_PROOFS_USE_MULTICORE_SDR=1 FIL_PROOFS_USE_GPU_TREE_BUILDER：使用GPU计算Precommit2 TREE hash\n1 export FIL_PROOFS_USE_GPU_TREE_BUILDER=1 FIL_PROOFS_USE_GPU_COLUMN_BUILDER：使用GUP计算Precommit2 COLUMN hash；\n1 export FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1 BELLMAN_NO_GPU：不使用GPU计算Commit2；\n如果要启用 GPU，则不能让这个环境变量（BELLMAN_NO_GPU）出现在系统的环境变量中（env）; 如果它出现在 env 中，则需要使用unset BELLMAN_NO_GPU命令取消，因为设置 export BELLMAN_NO_GPU=0 无效； 1 export BELLMAN_NO_GPU=1 MINER_API_INFO：Lotus miner的API信息；\n1 export MINER_API_INFO=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJyZWFkIiwid3JpdGUiLCJzaWduIiwiYWRtaW4iXX0.JSdq-OviNQW2dZslvyargJsqgLrlYCjoZCIFkb2u96g:/ip4/192.168.1.10/tcp/1234/http BELLMAN_CUSTOM_GPU：指定Commit2的GPU型号；\n1 export BELLMAN_CUSTOM_GPU=\u0026#34;GeForce RTX 2080 Ti:4352\u0026#34; ","description":"Lotus常用环境变量使用说明","id":9,"section":"docs","tags":null,"title":"Lotus常用环境变量使用说明","uri":"https://fiix.one/docs/blockchain/lotus/lotus%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"},{"content":"扇区生命周期及状态管理 扇区是Filecoin网络中的数据存储单元，目前主网的扇区大小有32GiB和64GiB。\n一. 扇区生命周期详解 Filecoin网络的扇区，需要通过一系列的计算过程，最终得到扇区内数据的证明结果，并存储到区块链上。\n扇区的主要计算过程包括：PreCommit1(PC1)、PreCommit2(PC2)、Commit2(C2)三个过程，目前在AMD EPYC 7542 CPU 和 2080Ti显卡上，基于官方代码，计算PC1的过程大约需要3个小时，PC2需要20分钟，C2需要40分钟。基于社区及优化后的代码，PC2为10分钟左右，C2在15分钟左右。\n1. 随机数扇区生命周期 随机数扇区即通过lotus-miner sectors pledge生成的扇区，扇区中存储的都是没有实际价值的随机数，目前仅仅是为了承诺有效算力。可以通过操作，将随机数扇区声明为有效数据存储的扇区。\n2. 订单扇区生命周期 订单扇区是矿工通过Filecoin的订单撮合市场，存储了客户的真实数据以后生成的扇区。\n二. 扇区状态管理 扇区主要状态包括：PreCommit1、PreCommit2、Committing、FinalizeSector\n1. 更新扇区状态 1 $ lotus-miner sectors update-state --really-do-it \u0026lt;sectorId\u0026gt; \u0026lt;newState\u0026gt; 针对CommitFailed状态的扇区，可通过以下命令，将扇区状态更改为Committing状态。\n1 $ lotus-miner sectors update-state --really-do-it \u0026lt;sectorId\u0026gt; Committing 2. 删除扇区 1 $ lotus-miner sectors remove --really-do-it \u0026lt;sectorId\u0026gt; 针对PreCommitFailed和SealPreCommit1Failed状态的扇区，因为还没有质押，可通过上面的命令直接删除。\n三. 顽固扇区删除 1. 什么是顽固扇区？ 所谓顽固扇区，是指因Worker掉线、扇区超时等原因导致的，无法被成功调度并完成封装的扇区。\n顽固扇区并不是指SealPreCommit1Failed，PreCommitFailed，CommitFailed这几种状态的扇区，因为这几种状态的扇区，均可通过lotus-miner sectors remove --really-do-it \u0026lt;SectorId\u0026gt;命令直接删除掉。\n而顽固扇区是指PreCommit1，PreCommit2，Committing，FinalizeSector这几种正常状态的扇区，但缺无法成功被调度并完成封装的扇区，执行以下两个命令也无法删除掉。\n1 2 lotus-miner sectors update-state --really-do-it \u0026lt;sectorId\u0026gt; Removing lotus-miner sectors remove --really-do-it \u0026lt;SectorId\u0026gt; 2. 顽固扇区有什么影响？如何发现它？ 顽固扇区会停留在扇区列表中，一直不断被调度（但又无法调度成功，扇区日志中通常有大量重复的retry操作），不仅浪费了调度系统的队列资源，还会影响扇区封装任务下发的数量。你会发现，扇区明明在列表中，就是无法封装成功，想删还删不掉，非常的痛苦。\n如何发现顽固扇区呢？因为Lotus的扇区号都是自增的，只要执行lotus-miner sectors list --fast查看一下扇区列表，列表的最后面，都是正在封装的扇区，而且这些扇区ID都是连续的。正常情况下，前面封装完的扇区都是Proving状态，如果看到前面Proving状态的扇区中夹杂了PreCommit1，PreCommit2，Committing这些状态的扇区，那这些就是顽固扇区了。\n另外，也可以通过lotus-miner sealing jobs | sort -k2查看正在封装的任务列表，如果发现列表头部的扇区ID和后面的差距很大，如果差了几十个甚至更多，那这些扇区也就是顽固扇区了，或者是扇区封装已经进入死循环了，要尽快处理掉。\n3. 顽固扇区如何删除？ 顽固扇区已经无法被成功调度，只能采取“非常手段”来处理。\n顽固扇区无法被调度，是因为扇区本身的文件已经丢失了，那么可以创建一个空的扇区文件，让扇区“假装”在封装，只要能被调度上，出现在lotus-miner sealing jobs中，就好处理了。\n3.1PreCommit1，PreCommit2状态的顽固扇区处理 针对PreCommit1，PreCommit2这两种状态的扇区，按如下的方法来处理：\n① 找一个空闲的Worker（没有任何封装任务），在LOTUS_WORKER_PATH的unsealed和seald目录下，分别创建对应扇区ID的空扇区文件，假设顽固扇区的ID为，那分别在unsealed和seald目录下执行：\n1 2 touch s-t0xxxxxx-100 # 其中t0xxxxxx是矿工ID ② 重启该Worker，注意观察Worker的日志中，该扇区会不会开始封装，如果没有开始封装，可以再重启一下Miner。\n③ 待该扇区开始封装，在lotus-miner sealing jobs列表中能看到以后，就可以执行命令先终止掉任务。\n1 lotus-miner sealing abort \u0026lt;JobId\u0026gt; 然后再执行删除该扇区。\n1 lotus-miner sectors remove \u0026lt;SectorId\u0026gt; 执行了该命令以后，将会在Miner的日志中看到错误，不要惊慌，这种日志属于正常提示。\n3.2Committing状态的顽固扇区处理 针对Committing状态的顽固扇区，同样是按照上面的方法，在unsealed和seald目录下创建一个空的扇区文件。\n但是不同的是，创建并重启Worker以后，该扇区并不会出现在lotus-miner sealing jobs列表中，而是直接变为CommitFailed，这个时候，执行以下命令删除扇区即可：\n1 lotus-miner sectors remove \u0026lt;SectorId\u0026gt; 注意！V5版本更新了MaxProveCommitDuration（ProveCommit超时时间）为30天，删除Committing状态的扇区会销毁前置质押中的存储质押部分质押币，请谨慎操作！\n4. 删除以后还要做什么？ 顽固扇区删除以后，最好重启一下Seal-Miner，这样扇区状态就会重新更新，顽固扇区也就不会被再次调度了。\n","description":"扇区生命周期及状态管理","id":10,"section":"docs","tags":null,"title":"扇区生命周期及状态管理","uri":"https://fiix.one/docs/blockchain/lotus/%E6%89%87%E5%8C%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8A%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"},{"content":"[toc]\n一.禁用 Nouveau 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sudo vim /etc/modprobe.d/blacklist-nouveau.conf 在文件最后加入以下内容: blacklist nouveau options nouveau modeset=0 更新使其生效 sudo update-initramfs -u 重启机器 reboot 检查是否禁用成功 lspci | grep nouveau 没有内容输出，说明禁用成功。 二.官网下载驱动 https://www.nvidia.cn/Download/index.aspx?lang=cn\n选择自己系统对应的驱动，并点击 “搜索” 下载进行下载。\n不推荐使用 sudo apt install nvidia-driver-440 方式安装。\n1 2 3 4 5 进入终端模式，并且输入下面命令关闭显示管理： sudo service lightdm stop 在命令行终端运行刚才下载的驱动： sudo ./NVIDIA-Linux-x86_64-460.67.run --no-opengl-files 三.检查安装结果 重启机器后，输入 nvidia-smi查看输出显示类似下面，就说明已经安装成功。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ nvidia-smi Thu Aug 5 02:08:44 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 460.67 Driver Version: 460.67 CUDA Version: 11.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 GeForce RTX 3090 Off | 00000000:81:00.0 Off | N/A | | 63% 41C P8 17W / 420W | 2MiB / 24268MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ $ 四.开启持久模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 $ nvidia-smi -pm 1 $ nvidia-smi Thu Aug 5 02:08:44 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 460.67 Driver Version: 460.67 CUDA Version: 11.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 GeForce RTX 3090 On | 00000000:81:00.0 Off | N/A | | 63% 41C P8 17W / 420W | 2MiB / 24268MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ ","description":"","id":11,"section":"docs","tags":["NVIDIA"],"title":"Nvidia显卡驱动安装","uri":"https://fiix.one/docs/os/nvidia%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"},{"content":"一.关闭swap 1 swapoff /swap.img 二.创建swap分区 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 删除原有/swap.img sudo rm -rf /swap.img # 创建512G交换分区 sudo fallocate -l 512G /swap.img sudo dd if=/dev/zero of=/swap.img bs=1024 count=536870912 # 创建256G交换分区 sudo fallocate -l 256G /swap.img sudo dd if=/dev/zero of=/swap.img bs=1024 count=268435456 # 创建128G交换分区 sudo fallocate -l 128G /swap.img sudo dd if=/dev/zero of=/swap.img bs=1024 count=134217728 # 创建64G交换分区 sudo fallocate -l 64G /swap.img sudo dd if=/dev/zero of=/swap.img bs=1024 count=67108864 sudo chmod 600 /swap.img sudo mkswap /swap.img # output # Setting up swapspace version 1, size = 2 GiB (2147479552 bytes) # no label, UUID=fde7d2c8-06ea-400a-9027-fd731d8ab4c8 三.启用交换分区 1 2 3 4 5 6 7 8 sudo swapon /swap.img # 设置开机启动 sudo vim /etc/fstab /swap.img swap swap defaults 0 0 # 检查交换分区设置 swapon --show 四.swap使用率修改 1 2 3 4 5 6 7 8 9 10 # 检查swap使用率 cat /proc/sys/vm/swappiness # 设置swap使用率，立即生效 sudo sysctl vm.swappiness=1 # 设置swap使用率，永久生效 sudo vim /etc/sysctl.conf # 添加如下,为0也不会停止使用swap.系统不积极使用swap而以 vm.swappiness=1 # 执行命令生效 sudo sysctl -p ","description":"","id":12,"section":"docs","tags":["SWAP分区"],"title":"Swap交换分区","uri":"https://fiix.one/docs/os/swap%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/"},{"content":"常用到快捷键：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ctrl+b ? 显示快捷键帮助 ctrl+b 空格键 采用下一个内置布局 ctrl+b ! 把当前窗口变为新窗口 ctrl+b \u0026#34; 模向分隔窗口 ctrl+b % 纵向分隔窗口 ctrl+b q 显示分隔窗口的编号 ctrl+b o 跳到下一个分隔窗口。多屏之间的切换 ctrl+b 上下键 上一个及下一个分隔窗口 ctrl+b C-方向键 调整分隔窗口大小 ctrl+b \u0026amp; 确认后退出当前tmux ctrl+b [ 复制模式，即将当前屏幕移到上一个的位置上，其他所有窗口都向前移动一个。 ctrl+b c 创建新窗口 ctrl+b n 选择下一个窗口 ctrl+b l 最后使用的窗口 ctrl+b p 选择前一个窗口 ctrl+b w 以菜单方式显示及选择窗口 ctrl+b s 以菜单方式显示和选择会话。这个常用到，可以选择进入哪个tmux ctrl+b t 显示时钟。然后按enter键后就会恢复到shell终端状态 ctrl+b d 脱离当前会话；暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 窗口操作的快捷键。\n1 2 3 4 5 6 ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。 ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。 ctrl+b n：切换到下一个窗口。 ctrl+b \u0026lt;number\u0026gt;：切换到指定编号的窗口，其中的是状态栏上的窗口编号。 ctrl+b w：从列表中选择窗口。 ctrl+b ,：窗口重命名。 tmux select-window命令用来切换窗口。\n1 2 3 4 5 # 切换到指定编号的窗口 $ tmux select-window -t \u0026lt;window-number\u0026gt; # 切换到指定名称的窗口 $ tmux select-window -t \u0026lt;window-name\u0026gt; tmux new-window命令用来创建新窗口。\n1 2 3 4 $ tmux new-window # 新建一个指定名称的窗口 $ tmux new-window -n \u0026lt;window-name\u0026gt; shell脚本示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/bin/sh tmux has-session -t info if [ $? != 0 ] then tmux new-session -t info -d tmux rename-window -t info status # 重命名window-name为status tmux send-keys -t info \u0026#39;uptime\u0026#39; C-m\t# 输入uptime命令并运行 tmux split-window -v -p 20 -t info # 划分上下两个窗格 -v 有无皆可 -p 占用屏幕比例 # tmux split-window -h # 划分左右两个窗格 # tmux select-pane 0 tmux select-pane -U # 光标切换到上方窗格 # tmux select-pane -D # tmux select-pane -L # tmux select-pane -R # tmux new-window -n \u0026lt;window-name\u0026gt; # 创建制定名称的window # tmux select-window -t \u0026lt;window-number/window-name\u0026gt; # 切换到指定编号的窗口 tmux send-keys -t info \u0026#39;df -h\u0026#39; C-m\t# 输入df -h命令并运行 tmux split-window -h -t info fi tmux attach -t info ","description":"","id":13,"section":"docs","tags":["Bash","Tmux"],"title":"Tmux命令详解","uri":"https://fiix.one/docs/command/tmux%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"content":"Ubuntu命令行note工具使用起来很简洁方便,安装后启动有时会报错.\n使用人少,修复简单却未能查到资料,特此记录修复方法.\n系统环境 1 2 3 4 5 6 $ sudo lsb_release -a No LSB modules are available. Distributor ID:\tUbuntu Description:\tUbuntu 20.04.2 LTS Release:\t20.04 Codename:\tfocal 安装命令 1 sudo apt-get install note 报错及修复 启动报错信息\n1 2 3 $ note Can\u0026#39;t locate YAML.pm in @INC (you may need to install the YAML module) (@INC contains: /usr/bin/.. blib/lib /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.30.0 /usr/local/share/perl/5.30.0 /usr/lib/x86_64-linux-gnu/perl5/5.30 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.30 /usr/share/perl/5.30 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base) at /usr/bin/note line 40. BEGIN failed--compilation aborted at /usr/bin/note line 40. 修复方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ sudo apt-get install libyaml-perl Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: libyaml-libyaml-perl Suggested packages: libyaml-shell-perl The following NEW packages will be installed: libyaml-libyaml-perl libyaml-perl 0 upgraded, 2 newly installed, 0 to remove and 34 not upgraded. Need to get 86.6 kB of archives. After this operation, 272 kB of additional disk space will be used. Do you want to continue? [Y/n] y Get:1 http://mirrors.aliyun.com/ubuntu focal/main amd64 libyaml-libyaml-perl amd64 0.81+repack-1 [28.5 kB] Get:2 http://mirrors.aliyun.com/ubuntu focal/main amd64 libyaml-perl all 1.30-1 [58.2 kB] Fetched 86.6 kB in 0s (224 kB/s) Selecting previously unselected package libyaml-libyaml-perl. (Reading database ... 123869 files and directories currently installed.) Preparing to unpack .../libyaml-libyaml-perl_0.81+repack-1_amd64.deb ... Unpacking libyaml-libyaml-perl (0.81+repack-1) ... Selecting previously unselected package libyaml-perl. Preparing to unpack .../libyaml-perl_1.30-1_all.deb ... Unpacking libyaml-perl (1.30-1) ... Setting up libyaml-libyaml-perl (0.81+repack-1) ... Setting up libyaml-perl (1.30-1) ... Processing triggers for man-db (2.9.1-1) ... 数据备份/导出/导入 数据备份\n1 cp $HOME/.notedb /backup/.notedb 数据导出\n1 note -D /backup/backup.txt 数据导入(默认为追加,可直接在有note数据的时候直接导入其他数据)\n1 note -I /backup/backup.txt ","description":"","id":14,"section":"docs","tags":["Bash","note"],"title":"命令行note安装报错","uri":"https://fiix.one/docs/os/ubuntu/%E5%91%BD%E4%BB%A4%E8%A1%8Cnote%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/"},{"content":"Docker/Docekr-Compose安装配置 一、Docker安装及卸载 1.Ubuntu-repository安装 更新apt包索引并安装包以允许apt通过 HTTPS 使用存储库 1 2 3 4 5 6 7 8 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 添加Docker GPG key 1 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 添加docker.list源 官方源 清华源 阿里源 官方源 1 2 3 echo \\ \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null 清华源 1 2 3 echo \\ \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null 阿里源 1 2 3 echo \\ \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null 安装 1 2 3 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io 卸载 卸载安装包\n1 sudo apt-get purge docker-ce docker-ce-cli containerd.io 删除所有镜像、容器和卷\n1 2 3 sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd 2.Ubuntu-deb安装 下载deb包 https://download.docker.com/linux/ubuntu/dists/\n安装 1 sudo dpkg -i /path/to/package.deb 3.Centos安装 安装yum-utils包（提供yum-config-manager 实用程序）并设置稳定存储库。 1 2 3 4 # 卸载之前安装的版本 yum remove docker docker-common docker-selinux docker-engine yum install -y yum-utils 官方源 清华源 阿里源 官方源 1 2 3 yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 清华源 1 2 3 4 sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo sed -i \u0026#39;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+\u0026#39; /etc/yum.repos.d/docker-ce.repo 阿里源 1 2 3 yum-config-manager \\ --add-repo \\ https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装 Docker 引擎 1 2 yum makecache fast yum install docker-ce 二、Docker配置 1.使用非root用户管理docker a. 创建 docker 用户组.\n$ sudo groupadd docker b. 将当前用户添加进 docker 用户组.\n$ sudo usermod -aG docker $USER c. 重启/注销重新登陆生效。\n在 Linux 上，您还可以运行以下命令来激活对组的更改\n$ newgrp docker d. 测试不用 sudo运行docker .\n$ docker run hello-world 2.配置镜像源 针对Docker客户端版本大于 1.10.0 的用户\n1 sudo vim /etc/docker/daemon.json 科大 网易 阿里 科大 https://docker.mirrors.ustc.edu.cn/ 网易 https://hub-mirror.c.163.com/ 阿里 ID获取: 阿里云控制台-容器镜像服务-镜像加速器\nhttps://\u0026lt;你的ID\u0026gt;.mirror.aliyuncs.com 1 2 3 { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://docker.mirrors.ustc.edu.cn/\u0026#34;] } 3.配置数据储存位置 1 2 3 4 { \u0026#34;data-root\u0026#34;: \u0026#34;/srv/docker-data\u0026#34;, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } 4.配置网络 docker网络模式:\nbridge 可以自定义网桥并配置固定ip\nnone 无指定网络\nhost 使用宿主机网络端口\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 创建自定义网桥及配置IP网段, --subnet 可自定义配置所有(保留IP地址) docker network create --subnet=x.x.x.0/24 netBridgeName(自定义网桥名称) # 创建容器且指定网络IP docker run -itd --name [containerName] --network=netBridgeName --ip x.x.x.2 [image] # 查看docker下网络模式 docker network list # 删除docker下的网络(删除创建的网桥) docker rm netBridgeName 5.配置DNS 1 2 3 { \u0026#34;dns\u0026#34;: [\u0026#34;8.8.8.8\u0026#34;, \u0026#34;8.8.4.4\u0026#34;] } 6. 配置远程访问 1 2 3 { \u0026#34;hosts\u0026#34;: [\u0026#34;unix:///var/run/docker.sock\u0026#34;, \u0026#34;tcp://127.0.0.1:2375\u0026#34;] } 1 2 sudo systemctl daemon-reload sudo systemctl restart docker 1 2 # 重启docker后查看配置完成端口是否运行 sudo netstat -lntp | grep dockerd 7.其他配置参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 { \u0026#34;allow-nondistributable-artifacts\u0026#34;: [], \u0026#34;api-cors-header\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;authorization-plugins\u0026#34;: [], \u0026#34;bip\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bridge\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cgroup-parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cluster-advertise\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cluster-store\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cluster-store-opts\u0026#34;: {}, \u0026#34;containerd\u0026#34;: \u0026#34;/run/containerd/containerd.sock\u0026#34;, \u0026#34;containerd-namespace\u0026#34;: \u0026#34;docker\u0026#34;, \u0026#34;containerd-plugin-namespace\u0026#34;: \u0026#34;docker-plugins\u0026#34;, \u0026#34;data-root\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;debug\u0026#34;: true, \u0026#34;default-address-pools\u0026#34;: [ { \u0026#34;base\u0026#34;: \u0026#34;172.80.0.0/16\u0026#34;, \u0026#34;size\u0026#34;: 24 }, { \u0026#34;base\u0026#34;: \u0026#34;172.90.0.0/16\u0026#34;, \u0026#34;size\u0026#34;: 24 } ], \u0026#34;default-cgroupns-mode\u0026#34;: \u0026#34;private\u0026#34;, \u0026#34;default-gateway\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;default-gateway-v6\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;default-runtime\u0026#34;: \u0026#34;runc\u0026#34;, \u0026#34;default-shm-size\u0026#34;: \u0026#34;64M\u0026#34;, \u0026#34;default-ulimits\u0026#34;: { \u0026#34;nofile\u0026#34;: { \u0026#34;Hard\u0026#34;: 64000, \u0026#34;Name\u0026#34;: \u0026#34;nofile\u0026#34;, \u0026#34;Soft\u0026#34;: 64000 } }, \u0026#34;dns\u0026#34;: [], \u0026#34;dns-opts\u0026#34;: [], \u0026#34;dns-search\u0026#34;: [], \u0026#34;exec-opts\u0026#34;: [], \u0026#34;exec-root\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;experimental\u0026#34;: false, \u0026#34;features\u0026#34;: {}, \u0026#34;fixed-cidr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fixed-cidr-v6\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;group\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hosts\u0026#34;: [], \u0026#34;icc\u0026#34;: false, \u0026#34;init\u0026#34;: false, \u0026#34;init-path\u0026#34;: \u0026#34;/usr/libexec/docker-init\u0026#34;, \u0026#34;insecure-registries\u0026#34;: [], \u0026#34;ip\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;ip-forward\u0026#34;: false, \u0026#34;ip-masq\u0026#34;: false, \u0026#34;iptables\u0026#34;: false, \u0026#34;ip6tables\u0026#34;: false, \u0026#34;ipv6\u0026#34;: false, \u0026#34;labels\u0026#34;: [], \u0026#34;live-restore\u0026#34;: true, \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-level\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;cache-disabled\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;cache-max-file\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;cache-max-size\u0026#34;: \u0026#34;20m\u0026#34;, \u0026#34;cache-compress\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;env\u0026#34;: \u0026#34;os,customer\u0026#34;, \u0026#34;labels\u0026#34;: \u0026#34;somelabel\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;max-size\u0026#34;: \u0026#34;10m\u0026#34; }, \u0026#34;max-concurrent-downloads\u0026#34;: 3, \u0026#34;max-concurrent-uploads\u0026#34;: 5, \u0026#34;max-download-attempts\u0026#34;: 5, \u0026#34;mtu\u0026#34;: 0, \u0026#34;no-new-privileges\u0026#34;: false, \u0026#34;node-generic-resources\u0026#34;: [ \u0026#34;NVIDIA-GPU=UUID1\u0026#34;, \u0026#34;NVIDIA-GPU=UUID2\u0026#34; ], \u0026#34;oom-score-adjust\u0026#34;: -500, \u0026#34;pidfile\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;raw-logs\u0026#34;: false, \u0026#34;registry-mirrors\u0026#34;: [], \u0026#34;runtimes\u0026#34;: { \u0026#34;cc-runtime\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/usr/bin/cc-runtime\u0026#34; }, \u0026#34;custom\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/usr/local/bin/my-runc-replacement\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;--debug\u0026#34; ] } }, \u0026#34;seccomp-profile\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;selinux-enabled\u0026#34;: false, \u0026#34;shutdown-timeout\u0026#34;: 15, \u0026#34;storage-driver\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;storage-opts\u0026#34;: [], \u0026#34;swarm-default-advertise-addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tls\u0026#34;: true, \u0026#34;tlscacert\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tlscert\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tlskey\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tlsverify\u0026#34;: true, \u0026#34;userland-proxy\u0026#34;: false, \u0026#34;userland-proxy-path\u0026#34;: \u0026#34;/usr/libexec/docker-proxy\u0026#34;, \u0026#34;userns-remap\u0026#34;: \u0026#34;\u0026#34; } * 报错处理 您的内核不支持 cgroup 交换限制功能\ndocker info提示WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.\n1 sudo vim /etc/default/grub 1 2 # 加入或修改 GRUB_CMDLINE_LINUX=\u0026#34;cgroup_enable=memory swapaccount=1\u0026#34; 1 2 3 4 sudo update-grub # 系统重启后修复。 sudo reboot now 三、Docekr-Compose安装 1. 二进制安装 1 sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose 国内加速下载\n1 sudo curl -L \u0026#34;https://gh.api.99988866.xyz/https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose # 赋予执行权限 sudo chmod +x /usr/local/bin/docker-compose # 检查是否安装成功 docker-compose --version 注意：如果docker-compose安装后命令失败，请检查您的路径。您还可以/usr/bin在路径中创建指向或任何其他目录的符号链接。\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 1 2 # 卸载 sudo rm /usr/local/bin/docker-compose 2. 使用pip安装 需要 pip 6.0 或更高版本\n# 安装 sudo pip install docker-compose # 卸载 pip uninstall docker-compose 四、Docekr-Compose配置 ","description":"","id":15,"section":"docs","tags":null,"title":"Docker安装配置","uri":"https://fiix.one/docs/virtualization/container/docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"content":"例如: 1 2 tree -C -L 3 -T \u0026#34;文件下载列表\u0026#34; -H \u0026#34;\u0026#34; -I \u0026#34;*.html|img|en-US|icons\u0026#34; --charset=utf8 -o index.html tree -C -L 3 -D -h --dirsfirst -F -T \u0026#34;文件下载列表\u0026#34; -H \u0026#34;\u0026#34; -I \u0026#34;*.html|*.sh\u0026#34; --charset=utf8 -o index.html 详解: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 $ tree --help usage: tree [-adfghilnpqrstuvxACDFNS] [-H baseHREF] [-T title ] [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version] [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst] [--charset charset] [--filelimit #] [\u0026lt;directory list\u0026gt;] -a All files are listed(列出所有文件). -d List directories only(只列出目录). -l Follow symbolic links like directories.(遵循象目录这样的符号链接) -f Print the full path prefix for each file(打印每个文件的完整路径前缀). -i Don\u0026#39;t print indentation lines()不要打印压痕线. -q Print non-printable characters as \u0026#39;?\u0026#39;.(将不可打印字符打印为\u0026#39;?\u0026#39;。) -N Print non-printable characters as is.(按原样打印不可打印字符) -p Print the protections for each file.(打印每个文件的保护) -u Displays file owner or UID number(显示文件所有者或UID号). -g Displays file group owner or GID number.(显示文件组所有者或GID编号) -s Print the size in bytes of each file.(打印每个文件的字节大小) -h Print the size in a more human readable way.(以更容易被人阅读的方式打印尺寸) -D Print the date of last modification.(打印上次修改的日期) -F Appends \u0026#39;/\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;*\u0026#39;, or \u0026#39;|\u0026#39; as per ls -F.(根据ls -F添加\u0026#39;/\u0026#39;、\u0026#39;=\u0026#39;、\u0026#39;*\u0026#39;或\u0026#39;|\u0026#39;。) -v Sort files alphanumerically by version.(按版本对文件进行字母数字排序) -r Sort files in reverse alphanumeric order.(按字母数字倒序排列文件。) -t Sort files by last modification time.(按上次修改时间排序文件) -x Stay on current filesystem only.(只保留当前文件系统) -L level Descend only level directories deep.(只向下深入到级别目录) -A Print ANSI lines graphic indentation lines.(打印ANSI线图形压痕线) -S Print with ASCII graphics indentation lines.(用ASCII图形缩进行打印) -n Turn colorization off always (-C overrides).(始终关闭着色(-C覆盖)) -C Turn colorization on always.(始终打开彩色化) -P pattern List only those files that match the pattern given.(只列出与给定模式匹配的文件) -I pattern Do not list files that match the given pattern.(不要列出与给定模式匹配的文件) -H baseHREF Prints out HTML format with baseHREF as top directory.(打印出以baseHREF作为顶部目录的HTML格式) -T string Replace the default HTML title and H1 header with string.(用字符串替换默认的HTML标题和H1标题) -R Rerun tree when max dir level reached.(当达到最大dir级别时重新运行树) -o file Output to file instead of stdout.(输出到文件而不是stdout。) --inodes Print inode number of each file.(打印每个文件的inode编号) --device Print device ID number to which each file belongs.(打印每个文件所属的设备ID号) --noreport Turn off file/directory count at end of tree listing.(在树列表末尾关闭文件/目录计数) --nolinks Turn off hyperlinks in HTML output(关闭HTML输出中的超链接). --dirsfirst List directories before files.(在文件之前列出目录) --charset X Use charset X for HTML and indentation line output.(使用charset X作为HTML和缩进行输出) --filelimit # Do not descend dirs with more than # files in them.(不要下载包含超过#文件的dirs) ","description":"","id":16,"section":"docs","tags":["Bash"],"title":"Tree命令详解","uri":"https://fiix.one/docs/command/tree%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"content":"acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.\nGithub项目地址\n本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.\nhttps://github.com/acmesh-official/acme.sh/wiki\n一. 安装 acme.sh 安装很简单, 一个命令:\n普通用户和 root 用户都可以安装使用.\ncurl https://get.acme.sh | sh -s email=my@example.com 安装过程进行了以下几步:\n把 acme.sh 安装到你的 home 目录下:\n将自动创建 alias别名, 方便你的使用: alias acme.sh=~/.acme.sh/acme.sh\n~/.acme.sh/ ​\n自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书. 更高级的安装选项请参考: https://github.com/acmesh-official/acme.sh/wiki/How-to-install\n安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: ~/.acme.sh/\n二. 配置server(默认ACME服务器) 对于 \u0026ndash;server 参数，您可以指定 ACME 服务器目录 URL，还可以为已知 CA 提供一个简短的友好名称。\n支持的短名称是:\nShort Name ACME server URL letsencrypt https://acme-v02.api.letsencrypt.org/directory letsencrypt_test https://acme-staging-v02.api.letsencrypt.org/directory buypass https://api.buypass.com/acme/directory buypass_test https://api.test4.buypass.no/acme/directory zerossl https://acme.zerossl.com/v2/DV90 sslcom https://acme.ssl.com/sslcom-dv-rsa, https://acme.ssl.com/sslcom-dv-ecc 短名称将被视为与 URL 相同:\n以下用法同义:\nacme.sh --issue .... --server zerossl -or- acme.sh --issue .... --server https://acme.zerossl.com/v2/DV90 现在默认的 CA 是zerossl. 如果临时使用其他CA可以指定参数 --server .\n例如使用 letsencrypt CA :\nacme.sh --register-account --server letsencrypt -m myemail@example.com --or-- acme.sh --issue --server letsencrypt -d example.com --dns dns_cf 配置永久默认CA:\nacme.sh --set-default-ca --server letsencrypt 如果您没有指定任何 --server 参数,现在将使用 letsencrypt为默认CA.\nacme.sh --issue -d example.com --dns dns_cf 三. 生成证书 acme.sh 实现了 acme 协议支持的所有验证协议.\n一般有两种方式验证: http 和 dns 验证.\n1. http 方式 需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.\nacme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/ 只需要指定域名, 并指定域名所在的网站根目录. acme.sh 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用.\n如果你用的 apache服务器, acme.sh 还可以智能的从 apache的配置中自动完成验证, 你不需要指定网站根目录:\nacme.sh --issue -d mydomain.com --apache 如果你用的 nginx服务器, 或者反代, acme.sh 还可以智能的从 nginx的配置中自动完成验证, 你不需要指定网站根目录:\nacme.sh --issue -d mydomain.com --nginx 注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.\n如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口, 完成验证:\nacme.sh --issue -d mydomain.com --standalone 更高级的用法请参考: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n2. dns 手动方式 手动在域名上添加一条 txt 解析记录, 验证域名所有权.\n这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证.\n坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。\nacme.sh --issue --dns -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 然后, acme.sh 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.\n等待解析完成之后, 重新生成证书:\nacme.sh --renew -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 注意第二次这里用的是 --renew\n3. DNS API 方式 dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.\nacme.sh 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.\n提供DNS别名模式: 如果您的 DNS 提供商不支持 API 访问，或者您担心将 DNS API 访问权限授予您的主域会带来安全问题，那么您可以使用 DNS 别名模式.\nDNS-alias-mode-Wiki\na. 阿里云 访问阿里云创建 API key.\nhttps://ak-console.aliyun.com/#/accesskey\n得如下信息并设置为环境变量:\nexport Ali_Key=\u0026#34;sdfsdfsdfljlbjkljlkjsdfoiwje\u0026#34; export Ali_Secret=\u0026#34;jlsdflanljkljlfdsaklkjflsa\u0026#34; 使用样例:\nacme.sh --issue --dns dns_ali -d example.com -d www.example.com Ali_Key / Ali_Secret 将会保存在 ~/.acme.sh/account.conf 并将在需要时重复使用.\nb. dnspod 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的.\n然后:\nexport DP_Id=\u0026#34;1234\u0026#34; export DP_Key=\u0026#34;sADDsdasdgdsf\u0026#34; acme.sh --issue --dns dns_dp -d aa.com -d www.aa.com 证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了.\n直接生成就好了:\nacme.sh --issue -d mydomain2.com --dns dns_dp 更详细的 api 用法: https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\nc. Cloudflare Cloudflare Domain API 提供了两种自动颁发证书的方法\n使用全局 API key\n访问获取API key. 生成的每个令牌都不会存储在 cloudflare 帐户中，如果设置不正确，将会过期。您将在 API 密钥部分获得如下信息并设置为环境变量.\nexport CF_Key=\u0026#34;sdfsdfsdfljlbjkljlkjsdfoiwje\u0026#34; export CF_Email=\u0026#34;xxxx@sss.com\u0026#34; 使用新的 cloudflare api 令牌，登录仪表板在最下方复制凭据后获得此令牌\nexport CF_Token=\u0026#34;sdfsdfsdfljlbjkljlkjsdfoiwje\u0026#34; export CF_Account_ID=\u0026#34;xxxxxxxxxxxxx\u0026#34; 为了使用新令牌，令牌当前需要对所有区域的 Zone.Zone 进行读取访问，并对 Zone.DNS 进行写入访问。 查看Issue #2398获取更多信息 .\n如果证书仅涵盖单个区域，您可以限制 API 令牌仅用于对单个域的 Zone.DNS 的写访问, 然后直接指定CF_Zone_ID:\nexport CF_Token=\u0026#34;sdfsdfsdfljlbjkljlkjsdfoiwje\u0026#34; export CF_Account_ID=\u0026#34;xxxxxxxxxxxxx\u0026#34; export CF_Zone_ID=\u0026#34;xxxxxxxxxxxxx\u0026#34; 使用样例:\nacme.sh --issue --dns dns_cf -d example.com -d www.example.com CF_Key /CF_Email 或者 CF_Token/ CF_Account_ID将会保存在 ~/.acme.sh/account.conf 并将在需要时重复使用.\n*. 其他DNS API 更多请查看使用方法https://github.com/acmesh-official/acme.sh/wiki/dnsapi\n四. copy/安装 证书 前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.\n注意, 默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.\n正确的使用方法是使用 --install-cert 命令,并指定目标位置, 然后证书文件会被copy到相应的位置,\n例如:\nApache example: acme.sh --install-cert -d example.com \\ --cert-file /path/to/certfile/in/apache/cert.pem \\ --key-file /path/to/keyfile/in/apache/key.pem \\ --fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\ --reloadcmd \u0026#34;service apache2 force-reload\u0026#34; Nginx example: acme.sh --install-cert -d example.com \\ --key-file /path/to/keyfile/in/nginx/key.pem \\ --fullchain-file /path/to/fullchain/nginx/cert.pem \\ --reloadcmd \u0026#34;service nginx force-reload\u0026#34; (一个小提醒, 这里用的是 service nginx force-reload, 不是 service nginx reload, 据测试, reload 并不会重新加载证书, 所以用的 force-reload)\nNginx 的配置 ssl_certificate 使用 /etc/nginx/ssl/fullchain.cer ，而非 /etc/nginx/ssl/\u0026lt;domain\u0026gt;.cer ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。\n--install-cert命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.\n详细参数请参考: https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc\n值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.\n五. 更新证书 目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.\n六. 更新 acme.sh 目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.\n升级 acme.sh 到最新版 :\nacme.sh --upgrade 如果你不想手动升级, 可以开启自动升级:\nacme.sh --upgrade --auto-upgrade 之后, acme.sh 就会自动保持更新了.\n你也可以随时关闭自动更新:\nacme.sh --upgrade --auto-upgrade 0 七. 出错怎么办： 如果出错, 请添加 debug log：\nacme.sh --issue ..... --debug 或者：\nacme.sh --issue ..... --debug 2 请参考： https://github.com/acmesh-official/acme.sh/wiki/How-to-debug-acme.sh\n","description":"","id":17,"section":"docs","tags":["acme","cert"],"title":"Acme证书签发","uri":"https://fiix.one/docs/os/acme%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91/"},{"content":"命令行使用代理 基本原理一样，触类旁通\n设置环境变量,临时生效 1 2 3 4 export http_proxy=http://127.0.0.1:1080 export https_proxy=https://127.0.0.1:1080 export ftp_proxy=\u0026#34;http://127.0.0.1:1080\u0026#34; export all_proxy=\u0026#34;socks5://127.0.0.1:1080\u0026#34; 设置环境变量,永久生效 修改 ~/.bash.rc\n1 2 3 4 5 6 export http_proxy=\u0026#34;http://127.0.0.1:1080\u0026#34; export https_proxy=\u0026#34;http://127.0.0.1:1080\u0026#34; export ftp_proxy=\u0026#34;http://127.0.0.1:1080\u0026#34; export all_proxy=\u0026#34;socks5://127.0.0.1:1080\u0026#34; # 无需代理的主机或域名，可使用通配符 export no_proxy=\u0026#34;localhost, 127.0.0.1, ::1, 10.*.*.*,\u0026#34; 取消设置环境变量 1 2 3 4 5 unset http_proxy unset https_proxy unset ftp_proxy unset all_proxy unset no_proxy apt-get代理,临时生效 在命令行临时带入\n在apt命令后面增加-o选项\n1 2 3 4 sudo apt-get -o Acquire::http::proxy=\u0026#34;http://127.0.0.1:1080/\u0026#34; update sudo apt-get -o Acquire::https::proxy=\u0026#34;https://127.0.0.1:1080/\u0026#34; update sudo apt-get -o Acquire::socks::proxy=\u0026#34;socks5://127.0.0.1:1080/\u0026#34; update # 注意上面的使用\u0026#39;socks\u0026#39;是正确的，链接才是\u0026#39;socks5\u0026#39; apt-get代理,永久生效 修改 /etc/apt/apt.conf\n1 2 3 4 Acquire::socks::proxy \u0026#34;socks5://127.0.0.1:1080/\u0026#34;; Acquire::http::proxy \u0026#34;http://127.0.0.1:1080/\u0026#34;; Acquire::https::proxy \u0026#34;https://127.0.0.1:1080/\u0026#34;; Acquire::ftp::proxy \u0026#34;ftp://127.0.0.1:1080/\u0026#34;; ","description":"","id":18,"section":"docs","tags":["Bash","代理"],"title":"命令行使用代理","uri":"https://fiix.one/docs/os/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"},{"content":"具体脚本的使用请详细阅读教程来操作使用！！！ MiTools下载 MI 8 [MIUI 11 9.9.27 开发版]\n这个是我自己使用的版本，脚本经过测试。\nDoc地址\nDownload [su.zip] 语音识别脚本下载 请详细查看视频教程后使用\nWin\u0026amp;Linux 通用BV15541147c6\nAndroidBV1iQ4y1N7NC\nDownload [speech.sh] Markdown小脚本 批量加入数据\n修改元数据\n待添加\n","description":"","id":19,"section":"","tags":null,"title":"Download","uri":"https://fiix.one/download/"},{"content":"文献地址 部分文献摘录于：git-scm.com\nGit 恢复到上次提交 1 2 3 4 5 6 git log #查询到需要恢复的版本 git reset --soft hash1 #--soft 保存本地文件 git reset --hard hash2 #--hard 本地文件也被恢复到上一个版本 git push origin HEAD --force Git Add 撤销 撤销操作\n1 2 3 git status #先看一下add 中的文件 git reset HEAD #撤销上一次add git reset HEAD path/file.name #单独撤销某个文件 Git 更改项目语言分类 在项目目录中创建一个名为 \u0026ldquo;.gitattributes\u0026rdquo; 的文件，添加以下代码：\n*.js linguist-language=Java 重新git push到 Github 上\nGit 强制放弃本地修改（新增、删除文件） 本地修改了一些文件，其中包含修改、新增、删除的，不需要了想要丢弃\ngit check -- .操作只放弃了修改的文件，新增和删除的仍然没有恢复\n使用如下命令：\ngit checkout . \u0026amp;\u0026amp; git clean -df\n可以放弃所有修改、新增、删除文件\n1 2 git checkout . //放弃本地修改，没有提交的可以回到未修改前版本 git clean //是从工作目录中移除没有track的文件 通常的参数是\n1 2 3 git clean -df -d #表示同时移除目录, -f #表示force,在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行. Git 工具 - 子模块 项目嵌套子项目（仓库）\n子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n开始使用子模块 首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 git submodule add 命令后面加上想要跟踪的项目的相对或绝对 URL 来添加新的子模块。\n在本例中，我们将会添加一个名为 “DbConnector” 的库。\n1 2 3 4 5 6 7 $ git submodule add https://github.com/chaconinc/DbConnector Cloning into \u0026#39;DbConnector\u0026#39;... remote: Counting objects: 11, done. remote: Compressing objects: 100% (10/10), done. remote: Total 11 (delta 0), reused 11 (delta 0) Unpacking objects: 100% (11/11), done. Checking connectivity... done. 默认情况下，子模块会将子项目放到一个与仓库同名的目录中，如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。\n运行 git status\n1 2 3 4 5 6 7 8 9 $ git status On branch master Your branch is up-to-date with \u0026#39;origin/master\u0026#39;. Changes to be committed: (use \u0026#34;git reset HEAD \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: .gitmodules new file: DbConnector 注意产生到新的 .gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：\n1 2 3 [submodule \u0026#34;DbConnector\u0026#34;] path = DbConnector url = https://github.com/chaconinc/DbConnector 如果有多个子模块，该文件中就会有多条记录。 要重点注意的是，该文件也像 .gitignore 文件一样受到版本控制。 它会和该项目的其他部分一同被拉取推送。 这就是克隆该项目的人知道去哪获得子模块的原因。\n可以根据自己的需要，通过在本地执行 git config submodule.DbConnector.url \u0026lt;私有URL\u0026gt; 来覆盖这个选项的值\nDbConnector 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。\n克隆含有子模块的项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 $ git clone https://github.com/chaconinc/MainProject Cloning into \u0026#39;MainProject\u0026#39;... remote: Counting objects: 14, done. remote: Compressing objects: 100% (13/13), done. remote: Total 14 (delta 1), reused 13 (delta 0) Unpacking objects: 100% (14/14), done. Checking connectivity... done. $ cd MainProject $ ls -la total 16 drwxr-xr-x 9 schacon staff 306 Sep 17 15:21 . drwxr-xr-x 7 schacon staff 238 Sep 17 15:21 .. drwxr-xr-x 13 schacon staff 442 Sep 17 15:21 .git -rw-r--r-- 1 schacon staff 92 Sep 17 15:21 .gitmodules drwxr-xr-x 2 schacon staff 68 Sep 17 15:21 DbConnector -rw-r--r-- 1 schacon staff 756 Sep 17 15:21 Makefile drwxr-xr-x 3 schacon staff 102 Sep 17 15:21 includes drwxr-xr-x 4 schacon staff 136 Sep 17 15:21 scripts drwxr-xr-x 4 schacon staff 136 Sep 17 15:21 src $ cd DbConnector/ $ ls $ DbConnector 目录是空的。\n你必须运行两个命令：\ngit submodule init 用来初始化本地配置文件\ngit submodule update 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。\n现在 DbConnector 子目录是处在和之前提交时相同的状态了\n更简单一点的方式。 如果给 git clone 命令传递 --recurse-submodules 选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。\n单独克隆了模块但忘记添加子模块（注意） 已经克隆了项目但忘记了 --recurse-submodules，\n那么可以运行 git submodule update --init 将 git submodule init 和 git submodule update 合并成一步。\n如果还要初始化、抓取并检出任何嵌套的子模块， 请使用简明的 git submodule update --init --recursive。\n从子模块的远端拉取上游修改 如果你不想在子目录中手动抓取与合并，那么还有种更容易的方式。 运行 git submodule update --remote，Git 将会进入子模块然后抓取并更新。\n1 2 3 4 5 6 7 8 $ git submodule update --remote DbConnector remote: Counting objects: 4, done. remote: Compressing objects: 100% (2/2), done. remote: Total 4 (delta 2), reused 4 (delta 2) Unpacking objects: 100% (4/4), done. From https://github.com/chaconinc/DbConnector 3f19983..d0354fc master -\u0026gt; origin/master Submodule path \u0026#39;DbConnector\u0026#39;: checked out \u0026#39;d0354fc054692d3906c85c3af05ddce39a1c0644\u0026#39; 此命令默认会假定你想要更新并检出子模块仓库的 master 分支。\n从项目远端拉取上游更改 协作者的视角，他自己的 MainProject 仓库的本地克隆， 只是执行 git pull 获取子模块的新提交的更改还不够：\n1 2 3 4 5 6 7 8 9 10 11 $ git pull From https://github.com/chaconinc/MainProject fb9093c..0a24cfc master -\u0026gt; origin/master Fetching submodule DbConnector From https://github.com/chaconinc/DbConnector c3f01dc..c87d55d stable -\u0026gt; origin/stable Updating fb9093c..0a24cfc Fast-forward .gitmodules | 2 +- DbConnector | 2 +- 2 files changed, 2 insertions(+), 2 deletions(-) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ git status On branch master Your branch is up-to-date with \u0026#39;origin/master\u0026#39;. Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: DbConnector (new commits) Submodules changed but not updated: * DbConnector c87d55d...c3f01dc (4): \u0026lt; catch non-null terminated lines \u0026lt; more robust error handling \u0026lt; more efficient db routine \u0026lt; better connection routine no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) 默认情况下，git pull 命令会递归地抓取子模块的更改，如上面第一个命令的输出所示。 然而，它不会在主项目中更新子模块。\n这点可通过 git status 命令看到，它会显示子模块“已修改”，且“有新的提交”。\n此外，左边的尖括号（\u0026lt;）指出了新的提交，表示这些提交已在 MainProject 中记录，但尚未在本地的 DbConnector 中检出。\n为了完成在主项目的更新，你需要运行 git submodule update：\n1 2 3 4 5 6 7 $ git submodule update --init --recursive Submodule path \u0026#39;vendor/plugins/demo\u0026#39;: checked out \u0026#39;48679c6302815f6c76f1fe30625d795d9e55fc56\u0026#39; $ git status On branch master Your branch is up-to-date with \u0026#39;origin/master\u0026#39;. nothing to commit, working tree clean Git基本常用命令如下： mkdir： XX (创建一个空目录 XX指目录名) pwd： 显示当前目录的路径。 git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。 git add XX 把xx文件添加到暂存区去。 git commit –m “XX” 提交文件 –m 后面的是注释。 git status 查看仓库状态 git diff XX 查看XX文件修改了那些内容 git log 查看历史记录 git reset --hard HEAD^ 或者 git reset --hard HEAD~ 回退到上一个版本 (如果想回退到100个版本，使用git reset –hard HEAD~100 ) cat XX 查看XX文件内容 git reflog 查看历史记录的版本号id git checkout -- XX 把XX文件在工作区的修改全部撤销。 git rm XX 删除XX文件 git remote add origin https://github.com/username/testgit 关联一个远程库 git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库 git clone https://github.com/username/testgit 从远程库中克隆 git checkout –b dev 创建dev分支 并切换到dev分支上 git branch 查看当前所有的分支 git checkout master 切换回master分支 git merge dev 在当前的分支上合并dev分支 git branch –d dev 删除dev分支 git branch name 创建分支 git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作 git stash list 查看所有被隐藏的文件列表 git stash apply 恢复被隐藏的文件，但是内容不删除 git stash drop 删除文件 git stash pop 恢复文件的同时 也删除文件 git remote 查看远程库的信息 git remote –v 查看远程库的详细信息 git push origin master Git会把master分支推送到远程库对应的远程分支上 ","description":"","id":20,"section":"docs","tags":["Git"],"title":"Git简单用法","uri":"https://fiix.one/docs/command/git%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"},{"content":"🌍\nČeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文\nBash命令行的艺术 前言 基础 日常使用 文件及数据处理 系统调试 单行脚本 冷门但有用 仅限 OS X 系统 仅限 Windows 系统 更多资源 免责声明 1 curl -s \u0026#39;https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md\u0026#39; | egrep -o \u0026#39;`\\w+`\u0026#39; | tr -d \u0026#39;`\u0026#39; | cowsay -W50] 熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n这篇文章是许多作者和译者共同的成果。\n这里的部分内容\n首次\n出现\n于 Quora，\n但已经迁移到了 Github，并由众多高手做出了许多改进。\n如果你在本文中发现了错误或者存在可以改善的地方，请贡献你的一份力量。\n前言 涵盖范围：\n这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到覆盖面广（涉及所有重要的内容），具体（给出具体的最常用的例子），以及简洁（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。 本文主要为 Linux 所写，但在仅限 OS X 系统章节和仅限 Windows 系统章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。 注意事项：\n为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 apt-get，yum，dnf，pacman，\npip 或 brew（以及其它合适的包管理器）来安装依赖的程序。 遇到问题的话，请尝试使用 Explainshell 去获取相关命令、参数、管道等内容的解释。 基础 学习 Bash 的基础知识。具体地，在命令行中输入 man bash 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你只学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\n熟悉至少一个基于文本的编辑器。通常而言 Vim （vi） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\n学会如何使用 man 命令去阅读文档。学会使用 apropos 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 help 和 help -d 命令获取帮助信息。你可以用 type 命令 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\n学会使用 \u0026gt; 和 \u0026lt; 来重定向输出和输入，学会使用 | 来重定向管道。明白 \u0026gt; 会覆盖了输出文件而 \u0026gt;\u0026gt; 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n学会使用通配符 * （或许再算上 ? 和 [\u0026hellip;]） 和引用以及引用中 ' 和 \u0026quot; 的区别（后文中有一些具体的例子）。\n熟悉 Bash 中的任务管理工具：\u0026amp;，ctrl-z，ctrl-c，jobs，fg，bg，kill 等。\n学会使用 ssh 进行远程命令行登录，最好知道如何使用 ssh-agent，ssh-add 等命令来实现基础的无密码认证登录。\n学会基本的文件管理工具：ls 和 ls -l （了解 ls -l 中每一列代表的意义），less，head，tail 和 tail -f （甚至 less +F），ln 和 ln -s （了解硬链接与软链接的区别），chown，chmod，du （硬盘使用情况概述：du -hs *）。 关于文件系统的管理，学习 df，mount，fdisk，mkfs，lsblk。知道 inode 是什么（与 ls -i 和 df -i 等命令相关）。\n学习基本的网络管理工具：ip 或 ifconfig，dig。\n学习并使用一种版本控制管理系统，例如 git。\n熟悉正则表达式，学会使用 grep／egrep，它们的参数中 -i，-o，-v，-A，-B 和 -C 这些是很常用并值得认真学习的。\n学会使用 apt-get，yum，dnf 或 pacman （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 pip 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 pip 来安装会很方便）。\n日常使用 在 Bash 中，可以通过按 Tab 键实现自动补全参数，使用 ctrl-r 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 ctrl-r 会向后查找匹配项，按下 Enter 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\n在 Bash 中，可以按下 ctrl-w 删除你键入的最后一个单词，ctrl-u 可以删除行内光标所在位置之前的内容，alt-b 和 alt-f 可以以单词为单位移动光标，ctrl-a 可以将光标移至行首，ctrl-e 可以将光标移至行尾，ctrl-k 可以删除光标至行尾的所有内容，ctrl-l 可以清屏。键入 man readline 可以查看 Bash 中的默认快捷键。内容有很多，例如 alt-. 循环地移向前一个参数，而 alt-* 可以展开通配符。\n你喜欢的话，可以执行 set -o vi 来使用 vi 风格的快捷键，而执行 set -o emacs 可以把它改回来。\n为了便于编辑长命令，在设置你的默认编辑器后（例如 export EDITOR=vim），ctrl-x ctrl-e 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 escape-v。\n键入 history 查看命令行历史记录，再用 !n（n 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 !$， 它用于指代上次键入的参数，而 !! 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 ctrl-r 和 alt-. 来实现。\ncd 命令可以切换工作路径，输入 cd ~ 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 ~（例如 ~/.bashrc）。在 sh 脚本里则用环境变量 $HOME 指代 home 目录的路径。\n回到前一个工作路径：cd -。\n如果你输入命令的时候中途改了主意，按下 alt-# 在行首添加 # 把它当做注释再按下回车执行（或者依次按下 ctrl-a， #， enter）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\n使用 xargs （ 或 parallel）。他们非常给力。注意到你可以控制每行参数个数（-L）和最大并行数（-P）。如果你不确定它们是否会按你想的那样工作，先使用 xargs echo 查看一下。此外，使用 -I{} 会很方便。例如：\n1 2 find . -name \u0026#39;*.py\u0026#39; | xargs grep some_function cat hosts | xargs -I{} ssh root@{} hostname pstree -p 以一种优雅的方式展示进程树。\n使用 pgrep 和 pkill 根据名字查找进程或发送信号（-f 参数通常有用）。\n了解你可以发往进程的信号的种类。比如，使用 kill -STOP [pid] 停止一个进程。使用 man 7 signal 查看详细列表。\n使用 nohup 或 disown 使一个后台进程持续运行。\n使用 netstat -lntp 或 ss -plat 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 -u 则检查 UDP 端口）或者 lsof -iTCP -sTCP:LISTEN -P -n (这也可以在 OS X 上运行)。\nlsof 来查看开启的套接字和文件。\n使用 uptime 或 w 来查看系统已经运行多长时间。\n使用 alias 来创建常用命令的快捷形式。例如：alias ll='ls -latr' 创建了一个新的命令别名 ll。\n可以把别名、shell 选项和常用函数保存在 ~/.bashrc，具体看下这篇文章。这样做的话你就可以在所有 shell 会话中使用你的设定。\n把环境变量的设定以及登陆时要执行的命令保存在 ~/.bash_profile。而对于从图形界面启动的 shell 和 cron 启动的 shell，则需要单独配置文件。\n要想在几台电脑中同步你的配置文件（例如 .bashrc 和 .bash_profile），可以借助 Git。\n当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 \u0026quot;$FOO\u0026quot;。尽量使用 -0 或 -print0 选项以便用 NULL 来分隔文件名，例如 locate -0 pattern | xargs -0 ls -al 或 find / -print0 -type d | xargs -0 ls -al。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 IFS=$'\\n' 把内部字段分隔符设为换行符。\n在 Bash 脚本中，使用 set -x 去调试输出（或者使用它的变体 set -v，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 set -e 令脚本在发生错误时退出而不是继续运行；使用 set -u 来检查是否使用了未赋值的变量；试试 set -o pipefail，它可以监测管道中的错误。当牵扯到很多脚本时，使用 trap 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\n1 2 set -euo pipefail trap \u0026#34;echo \u0026#39;error: Script failed: see failed command above\u0026#39;\u0026#34; ERR 在 Bash 脚本中，子 shell（使用括号 (...)）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下： 1 2 3 # do something in current dir (cd /some/other/dir \u0026amp;\u0026amp; other-command) # continue in original dir 在 Bash 中，变量有许多的扩展方式。${name:?error message} 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 input_file=${1:?usage: $0 input_file}。在变量为空时使用默认值：${name:-default}。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 output_file=${2:-logfile}，如果省略了 $2，它的值就为空，于是 output_file 就会被设为 logfile。数学表达式：i=$(( (i + 1) % 5 ))。序列：{1..10}。截断字符串：${var%suffix} 和 ${var#prefix}。例如，假设 var=foo.pdf，那么 echo ${var%.pdf}.txt 将输出 foo.txt。\n使用括号扩展（{\u0026hellip;}）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 mv foo.{txt,pdf} some-dir（同时移动两个文件），cp somefile{,.bak}（会被扩展成 cp somefile somefile.bak）或者 mkdir -p test-{a,b,c}/subtest-{1,2,3}（会被扩展成所有可能的组合，并创建一个目录树）。\n通过使用 \u0026lt;(some command) 可以将输出视为文件。例如，对比本地文件 /etc/hosts 和一个远程文件：\n1 diff /etc/hosts \u0026lt;(ssh somehost cat /etc/hosts) 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。 1 2 3 { # 在这里写代码 } 了解 Bash 中的“here documents”，例如 cat \u0026lt;\u0026lt;EOF ...。\n在 Bash 中，同时重定向标准输出和标准错误：some-command \u0026gt;logfile 2\u0026gt;\u0026amp;1 或者 some-command \u0026amp;\u0026gt;logfile。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 \u0026lt;/dev/null 是一个好习惯。\n使用 man ascii 查看具有十六进制和十进制值的ASCII表。man unicode，man utf-8，以及 man latin1 有助于你去了解通用的编码信息。\n使用 screen 或 tmux 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 byobu 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 dtach。\nssh 中，了解如何使用 -L 或 -D（偶尔需要用 -R）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\n对 ssh 设置做一些小优化可能是很有用的，例如这个 ~/.ssh/config 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\nTCPKeepAlive=yes ServerAliveInterval=15 ServerAliveCountMax=6 Compression=yes ControlMaster auto ControlPath /tmp/%r@%h:%p ControlPersist yes 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 StrictHostKeyChecking=no，ForwardAgent=yes。\n考虑使用 mosh 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\n获取八进制形式的文件访问权限（修改系统设置时通常需要，但 ls 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\n1 stat -c \u0026#39;%A %a %n\u0026#39; /etc/timezone 使用 percol 或者 fzf 可以交互式地从另一个命令输出中选取值。\n使用 fpp（PathPicker）可以与基于另一个命令(例如 git）输出的文件交互。\n将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\npython -m SimpleHTTPServer 7777 （使用端口 7777 和 Python 2）或python -m http.server 7777 （使用端口 7777 和 Python 3）。\n以其他用户的身份执行命令，使用 sudo。默认以 root 用户的身份执行；使用 -u 来指定其他用户。使用 -i 来以该用户登录（需要输入_你自己的_密码）。\n将 shell 切换为其他用户，使用 su username 或者 sudo - username。加入 - 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。\n了解命令行的 128K 限制。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 find 或 xargs 通常可以解决。）\n当你需要一个基本的计算器时，可以使用 python 解释器（当然你要用 python 的时候也是这样）。例如：\n\u0026gt;\u0026gt;\u0026gt; 2+3 5 文件及数据处理 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：find . -iname '*something*'。在所有路径下通过文件名查找文件，使用 locate something （但注意到 updatedb 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\n使用 ag 在源代码或数据文件里检索（grep -r 同样可以做到，但相比之下 ag 更加先进）。\n将 HTML 转为文本：lynx -dump -stdin。\nMarkdown，HTML，以及所有文档格式之间的转换，试试 pandoc。\n当你要处理棘手的 XML 时候，xmlstarlet 算是上古时代流传下来的神器。\n使用 jq 处理 JSON。\n使用 shyaml 处理 YAML。\n要处理 Excel 或 CSV 文件的话，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep 等方便易用的工具。\n当你要处理 Amazon S3 相关的工作的时候，s3cmd 是一个很方便的工具而 s4cmd 的效率更高。Amazon 官方提供的 aws 以及 saws 是其他 AWS 相关工作的基础，值得学习。\n了解如何使用 sort 和 uniq，包括 uniq 的 -u 参数和 -d 参数，具体内容在后文单行脚本节中。另外可以了解一下 comm。\n了解如何使用 cut，paste 和 join 来更改文件。很多人都会使用 cut，但遗忘了 join。\n了解如何运用 wc 去计算新行数（-l），字符数（-m），单词数（-w）以及字节数（-c）。\n了解如何使用 tee 将标准输入复制到文件甚至标准输出，例如 ls -al | tee file.txt。\n要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 datamash。\n注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 LANG 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降许多倍。某些情况下（例如集合运算）你可以放心的使用 export LC_ALL=C 来忽略掉国际化并按照字节来判断顺序。\n你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 TZ=Pacific/Fiji date 可以获取斐济的时间。\n了解如何使用 awk 和 sed 来进行简单的数据处理。 参阅 One-liners 获取示例。\n替换一个或多个文件中出现的字符串：\n1 perl -pi.bak -e \u0026#39;s/old-string/new-string/g\u0026#39; my-files-*.txt 使用 repren 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 rename 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。） 1 2 3 4 5 6 # 将文件、目录和内容全部重命名 foo -\u0026gt; bar: repren --full --preserve-case --from foo --to bar . # 还原所有备份文件 whatever.bak -\u0026gt; whatever: repren --renames --from \u0026#39;(.*)\\.bak\u0026#39; --to \u0026#39;\\1\u0026#39; *.bak # 用 rename 实现上述功能（若可用）: rename \u0026#39;s/\\.bak$//\u0026#39; *.bak 根据 man 页面的描述，rsync 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 rsync 代替 scp 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的最快方法之一： 1 mkdir empty \u0026amp;\u0026amp; rsync -r --delete empty/ some-dir \u0026amp;\u0026amp; rmdir some-dir 若要在复制文件时获取当前进度，可使用 pv，pycp，progress，rsync --progress。若所执行的复制为block块拷贝，可以使用 dd status=progress。\n使用 shuf 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\n了解 sort 的参数。显示数字时，使用 -n 或者 -h 来显示更易读的数（例如 du -h 的输出）。明白排序时关键字的工作原理（-t 和 -k）。例如，注意到你需要 -k1，1 来仅按第一个域来排序，而 -k1 意味着按整行排序。稳定排序（sort -s）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 sort -k1，1 | sort -s -k2，2。\n如果你想在 Bash 命令行中写 tab 制表符，按下 ctrl-v [Tab] 或键入 $'\\t' （后者可能更好，因为你可以复制粘贴它）。\n标准的源代码对比及合并工具是 diff 和 patch。使用 diffstat 查看变更总览数据。注意到 diff -r 对整个文件夹有效。使用 diff -r tree1 tree2 | diffstat 查看变更的统计数据。vimdiff 用于比对并编辑文件。\n对于二进制文件，使用 hd，hexdump 或者 xxd 使其以十六进制显示，使用 bvi，hexedit 或者 biew 来进行二进制编辑。\n同样对于二进制文件，strings（包括 grep 等工具）可以帮助在二进制文件中查找特定比特。\n制作二进制差分文件（Delta 压缩），使用 xdelta3。\n使用 iconv 更改文本编码。需要更高级的功能，可以使用 uconv，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\n1 uconv -f utf-8 -t utf-8 -x \u0026#39;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] \u0026gt;; ::Any-NFC; \u0026#39; \u0026lt; input.txt \u0026gt; output.txt 拆分文件可以使用 split（按大小拆分）和 csplit（按模式拆分）。\n操作日期和时间表达式，可以用 dateutils 中的 dateadd、datediff、strptime 等工具。\n使用 zless、zmore、zcat 和 zgrep 对压缩过的文件进行操作。\n文件属性可以通过 chattr 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：sudo chattr +i /critical/directory/or/file\n使用 getfacl 和 setfacl 以保存和恢复文件权限。例如：\n1 2 getfacl -R /some/path \u0026gt; permissions.txt setfacl --restore=permissions.txt 为了高效地创建空文件，请使用 truncate（创建稀疏文件），fallocate（用于 ext4，xfs，btrf 和 ocfs2 文件系统），xfs_mkfile（适用于几乎所有的文件系统，包含在 xfsprogs 包中），mkfile（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。 系统调试 curl 和 curl -I 可以被轻松地应用于 web 调试中，它们的好兄弟 wget 也是如此，或者也可以试试更潮的 httpie。\n获取 CPU 和硬盘的使用状态，通常使用使用 top（htop 更佳），iostat 和 iotop。而 iostat -mxz 15 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\n使用 netstat 和 ss 查看网络连接的细节。\ndstat 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 glances，它会在一个终端窗口中向你提供一些系统级的数据。\n若要了解内存状态，运行并理解 free 和 vmstat 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\nJava 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 kill -3 \u0026lt;pid\u0026gt; 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 jps，jstat，jstack，jmap 很有用。SJK tools 更高级。\n使用 mtr 去跟踪路由，用于确定网络问题。\n用 ncdu 来查看磁盘使用情况，它比寻常的命令，如 du -sh *，更节省时间。\n查找正在使用带宽的套接字连接或进程，使用 iftop 或 nethogs。\nab 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 siege。\nwireshark，tshark 和 ngrep 可用于复杂的网络调试。\n了解 strace 和 ltrace。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（-c）和附加到一个运行的进程参数 （-p）。\n了解使用 ldd 来检查共享库。但是永远不要在不信任的文件上运行。\n了解如何运用 gdb 连接到一个运行着的进程并获取它的堆栈轨迹。\n学会使用 /proc。它在调试正在出现的问题的时候有时会效果惊人。比如：/proc/cpuinfo，/proc/meminfo，/proc/cmdline，/proc/xxx/cwd，/proc/xxx/exe，/proc/xxx/fd/，/proc/xxx/smaps（这里的 xxx 表示进程的 id 或 pid）。\n当调试一些之前出现的问题的时候，sar 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n关于更深层次的系统分析以及性能分析，看看 stap（SystemTap），perf，以及sysdig。\n查看你当前使用的系统，使用 uname，uname -a（Unix／kernel 信息）或者 lsb_release -a（Linux 发行版信息）。\n无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 dmesg。\n如果你删除了一个文件，但通过 du 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\nlsof | grep deleted | grep \u0026quot;filename-of-my-big-file\u0026quot;\n单行脚本 一些命令组合的例子：\n当你需要对文本文件做集合交、并、差运算时，sort 和 uniq 会是你的好帮手。具体例子请参照代码后面的，此处假设 a 与 b 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 /tmp 在一个小的根分区上时你可能需要 -T 参数，但是实际上 sort 并不被内存大小约束），参阅前文中关于 LC_ALL 和 sort 的 -u 参数的部分。 1 2 3 sort a b | uniq \u0026gt; c # c 是 a 并 b sort a b | uniq -d \u0026gt; c # c 是 a 交 b sort a b b | uniq -u \u0026gt; c # c 是 a - b 使用 grep . *（每行都会附上文件名）或者 head -100 *（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 /sys、/proc、/etc）时特别好用。\n计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n1 awk \u0026#39;{ x += $3 } END { print x }\u0026#39; myfile 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 ls -l 但比 ls -lR 更易于理解： 1 find . -type f -ls 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 acct_id 参数在 URI 中。如果你想计算出每个 acct_id 值有多少次请求，使用如下代码： 1 egrep -o \u0026#39;acct_id=[0-9]+\u0026#39; access.log | cut -d= -f2 | sort | uniq -c | sort -rn 要持续监测文件改动，可以使用 watch，例如检查某个文件夹中文件的改变，可以用 watch -d -n 2 'ls -rtlh | tail'；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 watch -d -n 2 ifconfig。\n运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n1 2 3 4 5 6 7 8 function taocl() { curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md| pandoc -f markdown -t html | iconv -f \u0026#39;utf-8\u0026#39; -t \u0026#39;unicode\u0026#39; | xmlstarlet fo --html --dropdtd | xmlstarlet sel -t -v \u0026#34;(html/body/ul/li[count(p)\u0026gt;0])[$RANDOM mod last()+1]\u0026#34; | xmlstarlet unesc | fmt -80 } 冷门但有用 expr：计算表达式或正则匹配\nm4：简单的宏处理器\nyes：多次打印字符串\ncal：漂亮的日历\nenv：执行一个命令（脚本文件中很有用）\nprintenv：打印环境变量（调试时或在写脚本文件时很有用）\nlook：查找以特定字符串开头的单词或行\ncut，paste 和 join：数据修改\nfmt：格式化文本段落\npr：将文本格式化成页／列形式\nfold：包裹文本中的几行\ncolumn：将文本格式化成多个对齐、定宽的列或表格\nexpand 和 unexpand：制表符与空格之间转换\nnl：添加行号\nseq：打印数字\nbc：计算器\nfactor：分解因数\ngpg：加密并签名文件\ntoe：terminfo 入口列表\nnc：网络调试及数据传输\nsocat：套接字代理，与 netcat 类似\nslurm：网络流量可视化\ndd：文件或设备间传输数据\nfile：确定文件类型\ntree：以树的形式显示路径和文件，类似于递归的 ls\nstat：文件信息\ntime：执行命令，并计算执行时间\ntimeout：在指定时长范围内执行命令，并在规定时间结束后停止进程\nlockfile：使文件只能通过 rm -f 移除\nlogrotate： 切换、压缩以及发送日志文件\nwatch：重复运行同一个命令，展示结果并／或高亮有更改的部分\nwhen-changed：当检测到文件更改时执行指定命令。参阅 inotifywait 和 entr。\ntac：反向输出文件\nshuf：文件中随机选取几行\ncomm：一行一行的比较排序过的文件\nstrings：从二进制文件中抽取文本\ntr：转换字母\niconv 或 uconv：文本编码转换\nsplit 和 csplit：分割文件\nsponge：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 grep -v something some-file | sponge some-file\nunits：将一种计量单位转换为另一种等效的计量单位（参阅 /usr/share/units/definitions.units）\napg：随机生成密码\nxz：高比例的文件压缩\nldd：动态库信息\nnm：提取 obj 文件中的符号\nab 或 wrk：web 服务器性能分析\nstrace：调试系统调用\nmtr：更好的网络调试跟踪工具\ncssh：可视化的并发 shell\nrsync：通过 ssh 或本地文件系统同步文件和文件夹\nwireshark 和 tshark：抓包和网络调试工具\nngrep：网络层的 grep\nhost 和 dig：DNS 查找\nlsof：列出当前系统打开文件的工具以及查看端口信息\ndstat：系统状态查看\nglances：高层次的多子系统总览\niostat：硬盘使用状态\nmpstat： CPU 使用状态\nvmstat： 内存使用状态\nhtop：top 的加强版\nlast：登入记录\nw：查看处于登录状态的用户\nid：用户/组 ID 信息\nsar：系统历史数据\niftop 或 nethogs：套接字及进程的网络利用情况\nss：套接字数据\ndmesg：引导及系统错误信息\nsysctl： 在内核运行时动态地查看和修改内核的运行参数\nhdparm：SATA/ATA 磁盘更改及性能分析\nlsblk：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\nlshw，lscpu，lspci，lsusb 和 dmidecode：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\nlsmod 和 modinfo：列出内核模块，并显示其细节\nfortune，ddate 和 sl：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n仅限 OS X 系统 以下是仅限于 OS X 系统的技巧。\n用 brew （Homebrew）或者 port （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n用 pbcopy 复制任何命令的输出到桌面应用，用 pbpaste 粘贴输入。\n若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 alt-b、alt-f 等命令中用到），打开 偏好设置 -\u0026gt; 描述文件 -\u0026gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。\n用 open 或者 open -a /Applications/Whatever.app 使用桌面应用打开文件。\nSpotlight：用 mdfind 搜索文件，用 mdls 列出元数据（例如照片的 EXIF 信息）。\n注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 ps，ls，tail，awk，sed）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 \u0026ldquo;BSD General Commands Manual\u0026rdquo; 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 gawk 和 gsed 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 perl ）或者经过仔细的测试。\n用 sw_vers 获取 OS X 的版本信息。\n仅限 Windows 系统 以下是仅限于 Windows 系统的技巧。\n在 Winodws 下获取 Unix 工具 可以安装 Cygwin 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\n在 Windows 10 上，你可以使用 Bash on Ubuntu on Windows，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\n如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 MinGW 以及它的 MSYS 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\n另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 Cash。注意在此环境下只有很少的 Unix 命令和命令行可用。\n实用 Windows 命令行工具 可以使用 wmic 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\nWindows 实用的原生命令行网络工具包括 ping，ipconfig，tracert，和 netstat。\n可以使用 Rundll32 命令来实现许多有用的 Windows 任务 。\nCygwin 技巧 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n使用 mintty 作为你的命令行窗口。\n要访问 Windows 剪贴板，可以通过 /dev/clipboard。\n运行 cygstart 以通过默认程序打开一个文件。\n要访问 Windows 注册表，可以使用 regtool。\n注意 Windows 驱动器路径 C:\\ 在 Cygwin 中用 /cygdrive/c 代表，而 Cygwin 的 / 代表 Windows 中的 C:\\cygwin。要转换 Cygwin 和 Windows 风格的路径可以用 cygpath。这在需要调用 Windows 程序的脚本里很有用。\n学会使用 wmic，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 Cash。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\n要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 MinGW 以及它的 MSYS 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\n更多资源 awesome-shell：一份精心组织的命令行工具及资源的列表。 awesome-osx-command-line：一份针对 OS X 命令行的更深入的指南。 Strict mode：为了编写更好的脚本文件。 shellcheck：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。 Filenames and Pathnames in Shell：有关如何在 shell 脚本里正确处理文件名的细枝末节。 Data Science at the Command Line：用于数据科学的一些命令和工具，摘自同名书籍。 免责声明 除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 有能力 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)\n授权条款 本文使用授权协议 Creative Commons Attribution-ShareAlike 4.0 International License。\n","description":"","id":21,"section":"docs","tags":["Bash","Linux","Shell"],"title":"Bash命令行的艺术","uri":"https://fiix.one/docs/command/bash%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E8%89%BA%E6%9C%AF/"},{"content":"Centos7查看开启关闭firewalld systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 firewall-cmd --state #查看默认防火墙状态 #（关闭后显示notrunning，开启后显示running） ","description":"","id":22,"section":"docs","tags":["Centos","firewalld","防火墙"],"title":"Centos7查看开启关闭firewalld","uri":"https://fiix.one/docs/os/centos/centos7%E6%9F%A5%E7%9C%8B%E5%BC%80%E5%90%AF%E5%85%B3%E9%97%ADfirewalld/"},{"content":"iptables CentOS 配置防火墙操作实例（启、停、开、闭端口）：\n注：防火墙的基本操作命令：\n查询防火墙状态: [root@localhost ~]# service iptables status 停止防火墙: [root@localhost ~]# service iptables stop 启动防火墙: [root@localhost ~]# service iptables start 重启防火墙: [root@localhost ~]# service iptables restart 永久关闭防火墙: [root@localhost ~]# chkconfig iptables off 永久关闭后启用: [root@localhost ~]# chkconfig iptables on ","description":"","id":23,"section":"docs","tags":["Centos","iptables","防火墙"],"title":"Centos7查看开启关闭iptables","uri":"https://fiix.one/docs/os/centos/centos7%E6%9F%A5%E7%9C%8B%E5%BC%80%E5%90%AF%E5%85%B3%E9%97%ADiptables/"},{"content":"在CentOS7中，有三种定义的主机名: 静态的（Static hostname）\n“静态”主机名也称为内核主机名，是系统在启动时从/etc/hostname自动初始化的主机名。\n瞬态的（Tansient hostname）\n“瞬态”主机名是在系统运行时临时分配的主机名，例如，通过DHCP或mDNS服务器分配。\n灵活的（Pretty hostname）\n“灵活”主机名也有人叫做“别名”主机名。\n“灵活”主机名则允许使用自由形式（包括特殊/空白字符）的主机名，以展示给终端用户\n“静态”主机名和“瞬态”主机名都遵从作为互联网域名同样的字符限制规则。\n在CentOS 7中，使用hostnamectl命令行工具，可以查看或修改与主机名相关的配置。\n查看主机名: //查看一下当前主机名的情况 hostnamectl //查看全部三种主机名 hostnamectl status //只查看静态、瞬态或灵活主机名，分别使用--static，--transient或--pretty选项 # hostnamectl --static # hostnamectl --transient # hostnamectl --pretty //瞬态的（Tansient hostname） hostname //查看主机名配置文件，（静态）（Static hostname） cat /etc/hostname 查看当前Linux操作系统相关信息 （内核版本号、硬件架构、主机名称和操作系统类型等）: uname -a\t//查看到的是瞬态的（Tansient hostname） cat /etc/redhat-release\t//查看操作系统环境 修改主机名: 临时有效 1 hostname myname\t//只能临时修改的主机名，当重启机器后，主机名称又变回来了。 永久生效 (修改配置文件/etc/hostname来实现主机名的修改)\nvim /etc/hostname hostname myname (命令行)\n//永久性的修改主机名称，重启后能保持修改后的。\nhostnamectl set-hostname xxx\n//删除hostname\nhostnamectl set-hostname \u0026quot;\u0026quot;\nhostnamectl set-hostname \u0026quot;\u0026quot; \u0026ndash;static\nhostnamectl set-hostname \u0026quot;\u0026quot; \u0026ndash;pretty\n修改主机名： 1 # hostnamectl set-hostname myname 在修改静态/瞬态主机名时，任何特殊字符或空白字符会被移除，而提供的参数中的任何大写字母会自动转化为小写。\n一旦修改了静态主机名，/etc/hostname 将被自动更新。/etc/hosts 不会更新以保存所做的修改，所以每次修改主机名后一定要手动更新/etc/hosts，之后再重启CentOS 7。否则系统再启动时会很慢。\n手动更新/etc/hosts vim /etc/hosts #127.0.0.1 localhost localhost.localdomain 127.0.0.1 myname #::1 localhost localhost.localdomain ::1 myname 重启CentOS 7\n","description":"","id":24,"section":"docs","tags":["Centos","Hostname"],"title":"Centos7更改主机名","uri":"https://fiix.one/docs/os/centos/centos7%E6%9B%B4%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/"},{"content":"CentOS7关闭SELinux 查看状态 [root@dev-server ~]# getenforce Disabled [root@dev-server ~]# /usr/sbin/sestatus -v SELinux status: disabled 临时关闭\n##设置SELinux 成为permissive模式\n##setenforce 1 设置SELinux 成为enforcing模式\nsetenforce 0\n永久关闭\nvi /etc/selinux/config 将SELINUX=enforcing改为SELINUX=disabled\n设置后需要重启才能生效\n","description":"","id":25,"section":"docs","tags":["Centos","SELinux"],"title":"Centos7关闭SELinux","uri":"https://fiix.one/docs/os/centos/centos7%E5%85%B3%E9%97%ADselinux/"},{"content":"HTML5禁止用户缩放 html5默认允许用户缩放页面，如果需要禁止缩放。\n我们需要将user-scalabel=0设置下，具体代码如下：\n1 \u0026lt;meta content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;\u0026#34; name=\u0026#34;viewport\u0026#34; /\u0026gt; 注意:meta在head里。\n","description":"","id":26,"section":"docs","tags":["html5","禁止缩放"],"title":"HTML5禁止用户缩放","uri":"https://fiix.one/docs/web/html5%E7%A6%81%E6%AD%A2%E7%94%A8%E6%88%B7%E7%BC%A9%E6%94%BE/"},{"content":"Js获取当前日期时间及其它操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var myDate = new Date(); myDate.getYear(); //获取当前年份(2位) myDate.getFullYear(); //获取完整的年份(4位,1970-????) myDate.getMonth(); //获取当前月份(0-11,0代表1月) myDate.getDate(); //获取当前日(1-31) myDate.getDay(); //获取当前星期X(0-6,0代表星期天) myDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数) myDate.getHours(); //获取当前小时数(0-23) myDate.getMinutes(); //获取当前分钟数(0-59) myDate.getSeconds(); //获取当前秒数(0-59) myDate.getMilliseconds(); //获取当前毫秒数(0-999) myDate.toLocaleDateString(); //获取当前日期 var mytime=myDate.toLocaleTimeString(); //获取当前时间 myDate.toLocaleString( ); //获取日期与时间 日期时间脚本库方法列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Date.prototype.isLeapYear 判断闰年 Date.prototype.Format 日期格式化 Date.prototype.DateAdd 日期计算 Date.prototype.DateDiff 比较日期差 Date.prototype.toString 日期转字符串 Date.prototype.toArray 日期分割为数组 Date.prototype.DatePart 取日期的部分信息 Date.prototype.MaxDayOfDate 取日期所在月的最大天数 Date.prototype.WeekNumOfYear 判断日期所在年的第几周 StringToDate 字符串转日期型 IsValidDate 验证日期有效性 CheckDateTime 完整日期时间检查 daysBetween 日期天数差 js代码： 判断闰年 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 //--------------------------------------------------- // 判断闰年 //--------------------------------------------------- Date.prototype.isLeapYear = function() { return (0==this.getYear()%4\u0026amp;\u0026amp;((this.getYear()%100!=0)||(this.getYear()%400==0))); } //--------------------------------------------------- // 日期格式化 // 格式 YYYY/yyyy/YY/yy 表示年份 // MM/M 月份 // W/w 星期 // dd/DD/d/D 日期 // hh/HH/h/H 时间 // mm/m 分钟 // ss/SS/s/S 秒 //--------------------------------------------------- Date.prototype.Format = function(formatStr) { var str = formatStr; var Week = [\u0026#39;日\u0026#39;,\u0026#39;一\u0026#39;,\u0026#39;二\u0026#39;,\u0026#39;三\u0026#39;,\u0026#39;四\u0026#39;,\u0026#39;五\u0026#39;,\u0026#39;六\u0026#39;]; str=str.replace(/yyyy|YYYY/,this.getFullYear()); str=str.replace(/yy|YY/,(this.getYear() % 100)\u0026gt;9?(this.getYear() % 100).toString():\u0026#39;0\u0026#39; + (this.getYear() % 100)); str=str.replace(/MM/,this.getMonth()\u0026gt;9?this.getMonth().toString():\u0026#39;0\u0026#39; + this.getMonth()); str=str.replace(/M/g,this.getMonth()); str=str.replace(/w|W/g,Week[this.getDay()]); str=str.replace(/dd|DD/,this.getDate()\u0026gt;9?this.getDate().toString():\u0026#39;0\u0026#39; + this.getDate()); str=str.replace(/d|D/g,this.getDate()); str=str.replace(/hh|HH/,this.getHours()\u0026gt;9?this.getHours().toString():\u0026#39;0\u0026#39; + this.getHours()); str=str.replace(/h|H/g,this.getHours()); str=str.replace(/mm/,this.getMinutes()\u0026gt;9?this.getMinutes().toString():\u0026#39;0\u0026#39; + this.getMinutes()); str=str.replace(/m/g,this.getMinutes()); str=str.replace(/ss|SS/,this.getSeconds()\u0026gt;9?this.getSeconds().toString():\u0026#39;0\u0026#39; + this.getSeconds()); str=str.replace(/s|S/g,this.getSeconds()); return str; } 求两个时间的天数差 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //+--------------------------------------------------- //| 求两个时间的天数差 日期格式为 YYYY-MM-dd //+--------------------------------------------------- function daysBetween(DateOne,DateTwo) { var OneMonth = DateOne.substring(5,DateOne.lastIndexOf (\u0026#39;-\u0026#39;)); var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (\u0026#39;-\u0026#39;)+1); var OneYear = DateOne.substring(0,DateOne.indexOf (\u0026#39;-\u0026#39;)); var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf (\u0026#39;-\u0026#39;)); var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (\u0026#39;-\u0026#39;)+1); var TwoYear = DateTwo.substring(0,DateTwo.indexOf (\u0026#39;-\u0026#39;)); var cha=((Date.parse(OneMonth+\u0026#39;/\u0026#39;+OneDay+\u0026#39;/\u0026#39;+OneYear)- Date.parse(TwoMonth+\u0026#39;/\u0026#39;+TwoDay+\u0026#39;/\u0026#39;+TwoYear))/86400000); return Math.abs(cha); } 日期计算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //+--------------------------------------------------- //| 日期计算 //+--------------------------------------------------- Date.prototype.DateAdd = function(strInterval, Number) { var dtTmp = this; switch (strInterval) { case \u0026#39;s\u0026#39; :return new Date(Date.parse(dtTmp) + (1000 * Number)); case \u0026#39;n\u0026#39; :return new Date(Date.parse(dtTmp) + (60000 * Number)); case \u0026#39;h\u0026#39; :return new Date(Date.parse(dtTmp) + (3600000 * Number)); case \u0026#39;d\u0026#39; :return new Date(Date.parse(dtTmp) + (86400000 * Number)); case \u0026#39;w\u0026#39; :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number)); case \u0026#39;q\u0026#39; :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); case \u0026#39;m\u0026#39; :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); case \u0026#39;y\u0026#39; :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); } } 比较日期差 dtEnd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //+--------------------------------------------------- //| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串 //+--------------------------------------------------- Date.prototype.DateDiff = function(strInterval, dtEnd) { var dtStart = this; if (typeof dtEnd == \u0026#39;string\u0026#39; )//如果是字符串转换为日期型 { dtEnd = StringToDate(dtEnd); } switch (strInterval) { case \u0026#39;s\u0026#39; :return parseInt((dtEnd - dtStart) / 1000); case \u0026#39;n\u0026#39; :return parseInt((dtEnd - dtStart) / 60000); case \u0026#39;h\u0026#39; :return parseInt((dtEnd - dtStart) / 3600000); case \u0026#39;d\u0026#39; :return parseInt((dtEnd - dtStart) / 86400000); case \u0026#39;w\u0026#39; :return parseInt((dtEnd - dtStart) / (86400000 * 7)); case \u0026#39;m\u0026#39; :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1); case \u0026#39;y\u0026#39; :return dtEnd.getFullYear() - dtStart.getFullYear(); } } 日期输出字符串，重载了系统的toString方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //+--------------------------------------------------- //| 日期输出字符串，重载了系统的toString方法 //+--------------------------------------------------- Date.prototype.toString = function(showWeek) { var myDate= this; var str = myDate.toLocaleDateString(); if (showWeek) { var Week = [\u0026#39;日\u0026#39;,\u0026#39;一\u0026#39;,\u0026#39;二\u0026#39;,\u0026#39;三\u0026#39;,\u0026#39;四\u0026#39;,\u0026#39;五\u0026#39;,\u0026#39;六\u0026#39;]; str += \u0026#39; 星期\u0026#39; + Week[myDate.getDay()]; } return str; } 日期合法性验证 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //+--------------------------------------------------- //| 日期合法性验证 //| 格式为：YYYY-MM-DD或YYYY/MM/DD //+--------------------------------------------------- function IsValidDate(DateStr) { var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,\u0026#39;\u0026#39;); //去两边空格; if(sDate==\u0026#39;\u0026#39;) return true; //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为\u0026#39;\u0026#39; //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式 var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,\u0026#39;\u0026#39;); if (s==\u0026#39;\u0026#39;) //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D { var t=new Date(sDate.replace(/\\-/g,\u0026#39;/\u0026#39;)); var ar = sDate.split(/[-/:]/); if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate()) { //alert(\u0026#39;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。\u0026#39;); return false; } } else { //alert(\u0026#39;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。\u0026#39;); return false; } return true; } 日期时间检查 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //+--------------------------------------------------- //| 日期时间检查 //| 格式为：YYYY-MM-DD HH:MM:SS //+--------------------------------------------------- function CheckDateTime(str) { var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/; var r = str.match(reg); if(r==null)return false; r[2]=r[2]-1; var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]); if(d.getFullYear()!=r[1])return false; if(d.getMonth()!=r[2])return false; if(d.getDate()!=r[3])return false; if(d.getHours()!=r[4])return false; if(d.getMinutes()!=r[5])return false; if(d.getSeconds()!=r[6])return false; return true; } 把日期分割成数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //+--------------------------------------------------- //| 把日期分割成数组 //+--------------------------------------------------- Date.prototype.toArray = function() { var myDate = this; var myArray = Array(); myArray[0] = myDate.getFullYear(); myArray[1] = myDate.getMonth(); myArray[2] = myDate.getDate(); myArray[3] = myDate.getHours(); myArray[4] = myDate.getMinutes(); myArray[5] = myDate.getSeconds(); return myArray; } 取得日期数据信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //+--------------------------------------------------- //| 取得日期数据信息 //| 参数 interval 表示数据类型 //| y 年 m月 d日 w星期 ww周 h时 n分 s秒 //+--------------------------------------------------- Date.prototype.DatePart = function(interval) { var myDate = this; var partStr=\u0026#39;\u0026#39;; var Week = [\u0026#39;日\u0026#39;,\u0026#39;一\u0026#39;,\u0026#39;二\u0026#39;,\u0026#39;三\u0026#39;,\u0026#39;四\u0026#39;,\u0026#39;五\u0026#39;,\u0026#39;六\u0026#39;]; switch (interval) { case \u0026#39;y\u0026#39; :partStr = myDate.getFullYear();break; case \u0026#39;m\u0026#39; :partStr = myDate.getMonth()+1;break; case \u0026#39;d\u0026#39; :partStr = myDate.getDate();break; case \u0026#39;w\u0026#39; :partStr = Week[myDate.getDay()];break; case \u0026#39;ww\u0026#39; :partStr = myDate.WeekNumOfYear();break; case \u0026#39;h\u0026#39; :partStr = myDate.getHours();break; case \u0026#39;n\u0026#39; :partStr = myDate.getMinutes();break; case \u0026#39;s\u0026#39; :partStr = myDate.getSeconds();break; } return partStr; } 取得当前日期所在月的最大天数 1 2 3 4 5 6 7 8 9 10 11 12 13 //+--------------------------------------------------- //| 取得当前日期所在月的最大天数 //+--------------------------------------------------- Date.prototype.MaxDayOfDate = function() { var myDate = this; var ary = myDate.toArray(); var date1 = (new Date(ary[0],ary[1]+1,1)); var date2 = date1.dateAdd(1,\u0026#39;m\u0026#39;,1); var result = dateDiff(date1.Format(\u0026#39;yyyy-MM-dd\u0026#39;),date2.Format(\u0026#39;yyyy-MM-dd\u0026#39;)); return result; } 取得当前日期所在周是一年中的第几周 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //+--------------------------------------------------- //| 取得当前日期所在周是一年中的第几周 //+--------------------------------------------------- Date.prototype.WeekNumOfYear = function() { var myDate = this; var ary = myDate.toArray(); var year = ary[0]; var month = ary[1]+1; var day = ary[2]; document.write(\u0026#39;\u0026lt; script language=VBScript\\\u0026gt; \\n\u0026#39;); document.write(\u0026#39;myDate = Datue(\u0026#39;\u0026#39;+month+\u0026#39;-\u0026#39;+day+\u0026#39;-\u0026#39;+year+\u0026#39;\u0026#39;) \\n\u0026#39;); document.write(\u0026#39;result = DatePart(\u0026#39;ww\u0026#39;, myDate) \\n\u0026#39;); document.write(\u0026#39; \\n\u0026#39;); return result; } 字符串转成日期类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //+--------------------------------------------------- //| 字符串转成日期类型 //| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd //+--------------------------------------------------- function StringToDate(DateStr) { var converted = Date.parse(DateStr); var myDate = new Date(converted); if (isNaN(myDate)) { //var delimCahar = DateStr.indexOf(\u0026#39;/\u0026#39;)!=-1?\u0026#39;/\u0026#39;:\u0026#39;-\u0026#39;; var arys= DateStr.split(\u0026#39;-\u0026#39;); myDate = new Date(arys[0],--arys[1],arys[2]); } return myDate; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 //若要显示:当前日期加时间(如:2009-06-12 12:00) function CurentTime() { var now = new Date(); var year = now.getFullYear(); //年 var month = now.getMonth() + 1; //月 var day = now.getDate(); //日 var hh = now.getHours(); //时 var mm = now.getMinutes(); //分 var clock = year + \u0026#34;-\u0026#34;; if(month \u0026lt; 10) clock += \u0026#34;0\u0026#34;; clock += month + \u0026#34;-\u0026#34;; if(day \u0026lt; 10) clock += \u0026#34;0\u0026#34;; clock += day + \u0026#34; \u0026#34;; if(hh \u0026lt; 10) clock += \u0026#34;0\u0026#34;; clock += hh + \u0026#34;:\u0026#34;; if (mm \u0026lt; 10) clock += \u0026#39;0\u0026#39;; clock += mm; return(clock); } ","description":"","id":27,"section":"docs","tags":["JS","时间"],"title":"JS获取日期时间及其它操作","uri":"https://fiix.one/docs/web/js%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%8F%8A%E5%85%B6%E5%AE%83%E6%93%8D%E4%BD%9C/"},{"content":"Linux启用SSH密钥登录 在某些时候，使用密码作为登录服务器的认证方式是不太安全的，为避免密码被暴力破解，许多时候可以采用ssh密钥登录服务器，这里以CentOS为例。\n第一步 生成秘钥对:\n方法一 在服务器上利用ssh-keygen生成:\n输入:\nssh-keygen -t rsa -b 4096 -C \u0026quot;user@mail.com\u0026quot; -f id_rsa\t# -t 指定密钥类型，默认是 rsa ，可以省略。 # -b 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。 # -C 设置注释文字，比如邮箱。 # -f 指定密钥文件存储文件名。 一路enter跳过(也可以自己定义);\n会在$HOME/.ssh下生成公钥(id_rsa.pub)私钥(id_rsa);\n（公钥是用于服务器端，私钥是用于客户端） 然后将私钥下载至电脑上(登录时会用到)。\n方法二 利用远程工具(如Xshell)生成\n这里以Xshell为例，点击”工具-新建用户密钥生成向导”全部默认;\n将公钥保存为文件，命名为id_rsa.pub;\n上传到服务器$HOME/.ssh下。\n第二步 ​\t修改/etc/ssh/sshd_config如下部分:\nRSAAuthentication yes # 开启RSA验证 PubkeyAuthentication yes # 是否使用公钥验证 AuthorizedKeysFile $HOME/.ssh/authorized_keys # 公钥的保存位置 PasswordAuthentication no # 禁止使用密码验证登录 禁止使用密码验证登录，否则用密钥就没多大意义了。更改后保存。\n第三步 进入到密钥保存的目录：\ncd $HOME/.ssh 新建密钥验证文件”authorized_keys”，并将公钥输出重定向覆盖密钥验证文件: touch authorized_keys cat id_rsa.pub \u0026gt;\u0026gt; authorized_keys 这里建议使用追加而不是覆盖 修改authorized_keys文件权限为600 chmod 600 $HOME/.ssh/authorized_keys 第四步 重启ssh服务\n#CentOS 7之前的版本请执行: service sshd restart #CentOS 7请执行: systemctl restart sshd.service 接下来就能够通过密钥登录服务器了:\n在打开连接的时候会提示导入用户密钥，选择之前保存的私钥文件”id_rsa”即可。\n在Linux系统中用密钥方式连接远程Linux主机\nssh -i ~/.ssh/id_rsa -p 22 root@192.168.1.1 ","description":"","id":28,"section":"docs","tags":["SSH","Bash"],"title":"Linux启用SSH密钥登录","uri":"https://fiix.one/docs/os/linux%E5%90%AF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"},{"content":"Markdown: Syntax Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Overview Philosophy Markdown is intended to be as easy-to-read and easy-to-write as is feasible.\nReadability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it\u0026rsquo;s been marked up with tags or formatting instructions. While\nMarkdown\u0026rsquo;s syntax has been influenced by several existing text-to-HTML\nfilters \u0026ndash; including [Setext] 1, [atx] 2, [Textile] 3, [reStructuredText] 4,\n[Grutatext] 5, and [EtText] 6 \u0026ndash; the single biggest source of\ninspiration for Markdown\u0026rsquo;s syntax is the format of plain text email.\nTo this end, Markdown\u0026rsquo;s syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like *emphasis*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you\u0026rsquo;ve ever\nused email.\nInline HTML Markdown\u0026rsquo;s syntax is intended for one purpose: to be used as a\nformat for writing for the web.\nMarkdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is not to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a publishing format; Markdown is a writing\nformat. Thus, Markdown\u0026rsquo;s formatting syntax only addresses issues that\ncan be conveyed in plain text.\nFor any markup that is not covered by Markdown\u0026rsquo;s syntax, you simply\nuse HTML itself. There\u0026rsquo;s no need to preface it or delimit it to\nindicate that you\u0026rsquo;re switching from Markdown to HTML; you just use\nthe tags.\nThe only restrictions are that block-level HTML elements \u0026ndash; e.g. \u0026lt;div\u0026gt;,\n\u0026lt;table\u0026gt;, \u0026lt;pre\u0026gt;, \u0026lt;p\u0026gt;, etc. \u0026ndash; must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) \u0026lt;p\u0026gt; tags around HTML block-level tags.\nFor example, to add an HTML table to a Markdown article:\nThis is a regular paragraph. \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Foo\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; This is another regular paragraph. Note that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can\u0026rsquo;t use Markdown-style *emphasis* inside an\nHTML block.\nSpan-level HTML tags \u0026ndash; e.g. \u0026lt;span\u0026gt;, \u0026lt;cite\u0026gt;, or \u0026lt;del\u0026gt; \u0026ndash; can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou\u0026rsquo;d prefer to use HTML \u0026lt;a\u0026gt; or \u0026lt;img\u0026gt; tags instead of Markdown\u0026rsquo;s\nlink or image syntax, go right ahead.\nUnlike block-level HTML tags, Markdown syntax is processed within\nspan-level tags.\nAutomatic Escaping for Special Characters In HTML, there are two characters that demand special treatment: \u0026lt;\nand \u0026amp;. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. \u0026amp;lt;, and\n\u0026amp;amp;.\nAmpersands in particular are bedeviling for web writers. If you want to\nwrite about \u0026lsquo;AT\u0026amp;T\u0026rsquo;, you need to write \u0026lsquo;AT\u0026amp;amp;T\u0026rsquo;. You even need to\nescape ampersands within URLs. Thus, if you want to link to:\nhttp://images.google.com/images?num=30\u0026amp;q=larry+bird you need to encode the URL as:\nhttp://images.google.com/images?num=30\u0026amp;amp;q=larry+bird in your anchor tag href attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.\nMarkdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto \u0026amp;amp;.\nSo, if you want to include a copyright symbol in your article, you can write:\n\u0026amp;copy; and Markdown will leave it alone. But if you write:\nAT\u0026amp;T Markdown will translate it to:\nAT\u0026amp;amp;T Similarly, because Markdown supports inline HTML, if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:\n4 \u0026lt; 5 Markdown will translate it to:\n4 \u0026amp;lt; 5 However, inside Markdown code spans and blocks, angle brackets and\nampersands are always encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single \u0026lt;\nand \u0026amp; in your example code needs to be escaped.)\nBlock Elements Paragraphs and Line Breaks A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line \u0026ndash; a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be indented with spaces or tabs.\nThe implication of the \u0026ldquo;one or more consecutive lines of text\u0026rdquo; rule is\nthat Markdown supports \u0026ldquo;hard-wrapped\u0026rdquo; text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType\u0026rsquo;s \u0026ldquo;Convert Line Breaks\u0026rdquo; option) which translate every line break\ncharacter in a paragraph into a \u0026lt;br /\u0026gt; tag.\nWhen you do want to insert a \u0026lt;br /\u0026gt; break tag using Markdown, you\nend a line with two or more spaces, then type return.\nYes, this takes a tad more effort to create a \u0026lt;br /\u0026gt;, but a simplistic\n\u0026ldquo;every line break is a \u0026lt;br /\u0026gt;\u0026rdquo; rule wouldn\u0026rsquo;t work for Markdown.\nMarkdown\u0026rsquo;s email-style blockquoting and multi-paragraph list items\nwork best \u0026ndash; and look better \u0026ndash; when you format them with hard breaks.\nHeaders Markdown supports two styles of headers, [Setext] 1 and [atx] 2.\nSetext-style headers are \u0026ldquo;underlined\u0026rdquo; using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:\nThis is an H1 ============= This is an H2 ------------- Any number of underlining =\u0026rsquo;s or -\u0026rsquo;s will work.\nAtx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:\n# This is an H1 ## This is an H2 ###### This is an H6 Optionally, you may \u0026ldquo;close\u0026rdquo; atx-style headers. This is purely\ncosmetic \u0026ndash; you can use this if you think it looks better. The\nclosing hashes don\u0026rsquo;t even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :\n# This is an H1 # ## This is an H2 ## ### This is an H3 ###### Blockquotes Markdown uses email-style \u0026gt; characters for blockquoting. If you\u0026rsquo;re\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a \u0026gt; before every line:\n\u0026gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, \u0026gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. \u0026gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; \u0026gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse \u0026gt; id sem consectetuer libero luctus adipiscing. Markdown allows you to be lazy and only put the \u0026gt; before the first\nline of a hard-wrapped paragraph:\n\u0026gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of \u0026gt;:\n\u0026gt; This is the first level of quoting. \u0026gt; \u0026gt; \u0026gt; This is nested blockquote. \u0026gt; \u0026gt; Back to the first level. Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:\nThis is a header. This is the first list item. This is the second list item. Here\u0026rsquo;s some example code:\nreturn shell_exec(\u0026quot;echo $input | $markdown_script\u0026quot;); Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.\nLists Markdown supports ordered (numbered) and unordered (bulleted) lists.\nUnordered lists use asterisks, pluses, and hyphens \u0026ndash; interchangably\n\u0026ndash; as list markers:\n* Red * Green * Blue is equivalent to:\n+ Red + Green + Blue and:\n- Red - Green - Blue Ordered lists use numbers followed by periods:\n1. Bird 2. McHale 3. Parish It\u0026rsquo;s important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Bird\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;McHale\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Parish\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; If you instead wrote the list in Markdown like this:\n1. Bird 1. McHale 1. Parish or even:\n3. Bird 1. McHale 8. Parish you\u0026rsquo;d get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don\u0026rsquo;t have to.\nIf you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.\nList markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.\nTo make lists look nice, you can wrap items with hanging indents:\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. But if you want to be lazy, you don\u0026rsquo;t have to:\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. If list items are separated by blank lines, Markdown will wrap the\nitems in \u0026lt;p\u0026gt; tags in the HTML output. For example, this input:\n* Bird * Magic will turn into:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Bird\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Magic\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; But this:\n* Bird * Magic will turn into:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;Bird\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;Magic\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be indented by either 4 spaces\nor one tab:\n1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:\n* This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. To put a blockquote within a list item, the blockquote\u0026rsquo;s \u0026gt;\ndelimiters need to be indented:\n* A list item with a blockquote: \u0026gt; This is a blockquote \u0026gt; inside a list item. To put a code block within a list item, the code block needs\nto be indented twice \u0026ndash; 8 spaces or two tabs:\n* A list item with a code block: \u0026lt;code goes here\u0026gt; It\u0026rsquo;s worth noting that it\u0026rsquo;s possible to trigger an ordered list by\naccident, by writing something like this:\n1986. What a great season. In other words, a number-period-space sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:\n1986\\. What a great season. Code Blocks Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both \u0026lt;pre\u0026gt; and \u0026lt;code\u0026gt; tags.\nTo produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab or use three backticks ```. For example, given this input:\nThis is a normal paragraph: This is a code block. or\nThis is a normal paragraph: ``` This is a code block. ``` Markdown will generate:\n\u0026lt;p\u0026gt;This is a normal paragraph:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;This is a code block.\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; One level of indentation \u0026ndash; 4 spaces or 1 tab \u0026ndash; is removed from each\nline of the code block. For example, this:\nHere is an example of AppleScript: tell application \u0026quot;Foo\u0026quot; beep end tell will turn into:\n\u0026lt;p\u0026gt;Here is an example of AppleScript:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt; tell application \u0026quot;Foo\u0026quot; beep end tell \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; A code block continues until it reaches a line that is not indented\n(or the end of the article).\nWithin a code block, ampersands (\u0026amp;) and angle brackets (\u0026lt; and \u0026gt;)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown \u0026ndash; just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:\n\u0026lt;div class=\u0026quot;footer\u0026quot;\u0026gt; \u0026amp;copy; 2004 Foo Corporation \u0026lt;/div\u0026gt; will turn into:\n\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;\u0026amp;lt;div class=\u0026quot;footer\u0026quot;\u0026amp;gt; \u0026amp;amp;copy; 2004 Foo Corporation \u0026amp;lt;/div\u0026amp;gt; \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit\u0026rsquo;s also easy to use Markdown to write about Markdown\u0026rsquo;s own syntax.\nHorizontal Rules You can produce a horizontal rule tag (\u0026lt;hr /\u0026gt;) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:\n* * * *** ***** - - - --------------------------------------- Span Elements Links Markdown supports two style of links: inline and reference.\nIn both styles, the link text is delimited by [square brackets].\nTo create an inline link, use a set of regular parentheses immediately\nafter the link text\u0026rsquo;s closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an optional\ntitle for the link, surrounded in quotes. For example:\nThis is [an example](http://example.com/ \u0026quot;Title\u0026quot;) inline link. [This link](http://example.net/) has no title attribute. Will produce:\n\u0026lt;p\u0026gt;This is \u0026lt;a href=\u0026quot;http://example.com/\u0026quot; title=\u0026quot;Title\u0026quot;\u0026gt; an example\u0026lt;/a\u0026gt; inline link.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://example.net/\u0026quot;\u0026gt;This link\u0026lt;/a\u0026gt; has no title attribute.\u0026lt;/p\u0026gt; If you\u0026rsquo;re referring to a local resource on the same server, you can\nuse relative paths:\nSee my [About](/about/) page for details. Reference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:\nThis is [an example][id] reference-style link. You can optionally use a space to separate the sets of brackets:\nThis is [an example] [id] reference-style link. Then, anywhere in the document, you define your link label like this,\non a line by itself:\n[id]: http://example.com/ \u0026quot;Optional Title Here\u0026quot; That is:\nSquare brackets containing the link identifier (optionally\nindented from the left margin using up to three spaces); followed by a colon; followed by one or more spaces (or tabs); followed by the URL for the link; optionally followed by a title attribute for the link, enclosed\nin double or single quotes, or enclosed in parentheses. The following three link definitions are equivalent:\nNote: There is a known bug in Markdown.pl 1.0.1 which prevents\nsingle quotes from being used to delimit link titles.\nThe link URL may, optionally, be surrounded by angle brackets:\n[id]: \u0026lt;http://example.com/\u0026gt; \u0026quot;Optional Title Here\u0026quot; You can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:\n[id]: http://example.com/longish/path/to/resource/here \u0026quot;Optional Title Here\u0026quot; Link definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.\nLink definition names may consist of letters, numbers, spaces, and\npunctuation \u0026ndash; but they are not case sensitive. E.g. these two\nlinks:\n[link text][a]\n[link text][A]\nare equivalent.\nThe implicit link name shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets \u0026ndash; e.g., to link the word\n\u0026ldquo;Google\u0026rdquo; to the google.com web site, you could simply write:\nGoogle\nAnd then define the link:\nBecause link names may contain spaces, this shortcut even works for\nmultiple words in the link text:\nVisit Daring Fireball for more information.\nAnd then define the link:\nLink definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they\u0026rsquo;re\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.\nHere\u0026rsquo;s an example of reference links in action:\nI get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ \u0026quot;Google\u0026quot; [2]: http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot; [3]: http://search.msn.com/ \u0026quot;MSN Search\u0026quot; Using the implicit link name shortcut, you could instead write:\nI get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ \u0026quot;Google\u0026quot; [yahoo]: http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot; [msn]: http://search.msn.com/ \u0026quot;MSN Search\u0026quot; Both of the above examples will produce the following HTML output:\n\u0026lt;p\u0026gt;I get 10 times more traffic from \u0026lt;a href=\u0026quot;http://google.com/\u0026quot; title=\u0026quot;Google\u0026quot;\u0026gt;Google\u0026lt;/a\u0026gt; than from \u0026lt;a href=\u0026quot;http://search.yahoo.com/\u0026quot; title=\u0026quot;Yahoo Search\u0026quot;\u0026gt;Yahoo\u0026lt;/a\u0026gt; or \u0026lt;a href=\u0026quot;http://search.msn.com/\u0026quot; title=\u0026quot;MSN Search\u0026quot;\u0026gt;MSN\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; For comparison, here is the same paragraph written using\nMarkdown\u0026rsquo;s inline link style:\nI get 10 times more traffic from [Google](http://google.com/ \u0026quot;Google\u0026quot;) than from [Yahoo](http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot;) or [MSN](http://search.msn.com/ \u0026quot;MSN Search\u0026quot;). The point of reference-style links is not that they\u0026rsquo;re easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it\u0026rsquo;s 176 characters; and as raw HTML,\nit\u0026rsquo;s 234 characters. In the raw HTML, there\u0026rsquo;s more markup than there\nis text.\nWith Markdown\u0026rsquo;s reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.\nEmphasis Markdown treats asterisks (*) and underscores (_) as indicators of\nemphasis. Text wrapped with one * or _ will be wrapped with an\nHTML \u0026lt;em\u0026gt; tag; double *\u0026rsquo;s or _\u0026rsquo;s will be wrapped with an HTML\n\u0026lt;strong\u0026gt; tag. E.g., this input:\n*single asterisks* _single underscores_ **double asterisks** __double underscores__ will produce:\n\u0026lt;em\u0026gt;single asterisks\u0026lt;/em\u0026gt; \u0026lt;em\u0026gt;single underscores\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;double asterisks\u0026lt;/strong\u0026gt; \u0026lt;strong\u0026gt;double underscores\u0026lt;/strong\u0026gt; You can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.\nEmphasis can be used in the middle of a word:\nun*frigging*believable But if you surround an * or _ with spaces, it\u0026rsquo;ll be treated as a\nliteral asterisk or underscore.\nTo produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:\n\\*this text is surrounded by literal asterisks\\* Code To indicate a span of code, wrap it with backtick quotes (`).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:\nUse the `printf()` function. will produce:\n\u0026lt;p\u0026gt;Use the \u0026lt;code\u0026gt;printf()\u0026lt;/code\u0026gt; function.\u0026lt;/p\u0026gt; To include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:\n``There is a literal backtick (`) here.`` which will produce this:\n\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;There is a literal backtick (`) here.\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; The backtick delimiters surrounding a code span may include spaces \u0026ndash;\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:\nA single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` will produce:\n\u0026lt;p\u0026gt;A single backtick in a code span: \u0026lt;code\u0026gt;`\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;A backtick-delimited string in a code span: \u0026lt;code\u0026gt;`foo`\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; With a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:\nPlease don't use any `\u0026lt;blink\u0026gt;` tags. into:\n\u0026lt;p\u0026gt;Please don't use any \u0026lt;code\u0026gt;\u0026amp;lt;blink\u0026amp;gt;\u0026lt;/code\u0026gt; tags.\u0026lt;/p\u0026gt; You can write this:\n`\u0026amp;#8212;` is the decimal-encoded equivalent of `\u0026amp;mdash;`. to produce:\n\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;\u0026amp;amp;#8212;\u0026lt;/code\u0026gt; is the decimal-encoded equivalent of \u0026lt;code\u0026gt;\u0026amp;amp;mdash;\u0026lt;/code\u0026gt;.\u0026lt;/p\u0026gt; Images Admittedly, it\u0026rsquo;s fairly difficult to devise a \u0026ldquo;natural\u0026rdquo; syntax for\nplacing images into a plain text document format.\nMarkdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: inline and reference.\nInline image syntax looks like this:\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026quot;Optional title\u0026quot;) That is:\nAn exclamation mark: !; followed by a set of square brackets, containing the alt\nattribute text for the image; followed by a set of parentheses, containing the URL or path to\nthe image, and an optional title attribute enclosed in double\nor single quotes. Reference-style image syntax looks like this:\n![Alt text][id] Where \u0026ldquo;id\u0026rdquo; is the name of a defined image reference. Image references\nare defined using syntax identical to link references:\n[id]: url/to/image \u0026quot;Optional title attribute\u0026quot; As of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML \u0026lt;img\u0026gt; tags.\nMiscellaneous Automatic Links Markdown supports a shortcut style for creating \u0026ldquo;automatic\u0026rdquo; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\u0026lt;http://example.com/\u0026gt; Markdown will turn this into:\n\u0026lt;a href=\u0026quot;http://example.com/\u0026quot;\u0026gt;http://example.com/\u0026lt;/a\u0026gt; Automatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:\n\u0026lt;address@example.com\u0026gt; into something like this:\n\u0026lt;a href=\u0026quot;\u0026amp;#x6D;\u0026amp;#x61;i\u0026amp;#x6C;\u0026amp;#x74;\u0026amp;#x6F;:\u0026amp;#x61;\u0026amp;#x64;\u0026amp;#x64;\u0026amp;#x72;\u0026amp;#x65; \u0026amp;#115;\u0026amp;#115;\u0026amp;#64;\u0026amp;#101;\u0026amp;#120;\u0026amp;#x61;\u0026amp;#109;\u0026amp;#x70;\u0026amp;#x6C;e\u0026amp;#x2E;\u0026amp;#99;\u0026amp;#111; \u0026amp;#109;\u0026quot;\u0026gt;\u0026amp;#x61;\u0026amp;#x64;\u0026amp;#x64;\u0026amp;#x72;\u0026amp;#x65;\u0026amp;#115;\u0026amp;#115;\u0026amp;#64;\u0026amp;#101;\u0026amp;#120;\u0026amp;#x61; \u0026amp;#109;\u0026amp;#x70;\u0026amp;#x6C;e\u0026amp;#x2E;\u0026amp;#99;\u0026amp;#111;\u0026amp;#109;\u0026lt;/a\u0026gt; which will render in a browser as a clickable link to \u0026ldquo;address@example.com\u0026rdquo;.\n(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won\u0026rsquo;t fool all of\nthem. It\u0026rsquo;s better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)\nBackslash Escapes Markdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown\u0026rsquo;s\nformatting syntax. For example, if you wanted to surround a word\nwith literal asterisks (instead of an HTML \u0026lt;em\u0026gt; tag), you can use\nbackslashes before the asterisks, like this:\n\\*literal asterisks\\* Markdown provides backslash escapes for the following characters:\n\\ backslash ` backtick * asterisk _ underscore {} curly braces [] square brackets () parentheses # hash mark + plus sign - minus sign (hyphen) . dot ! exclamation mark ","description":"","id":29,"section":"docs","tags":["Markdown"],"title":"Markdown语法英文版","uri":"https://fiix.one/docs/other/markdown%E8%AF%AD%E6%B3%95%E8%8B%B1%E6%96%87/"},{"content":"@TOC\n欢迎使用Markdown编辑器 你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n新的改变 我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 功能快捷键 撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n合理的创建标题，有助于目录的生成 直接输入1次#，并按下space后，将生成1级标题。\n输入2次#，并按下space后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。\n如何改变文本的样式 强调文本 强调文本\n加粗文本 加粗文本\n==标记文本==\n删除文本\n引用文本\nH~2~O is是液体。\n2^10^ 运算结果是 1024.\n插入链接与图片 链接: link.\n图片: 带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30)\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n如何插入一段漂亮的代码片 博客设置页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 代码片.\n1 2 // An highlighted block var foo = \u0026#39;bar\u0026#39;; 生成一个适合你的列表 项目 项目 项目 项目1 项目2 项目3 计划任务 完成任务 创建一个表格 一个简单的表格是这么创建的：\n项目 Value 电脑 $1600 手机 $12 导管 $1 设定内容居中、居左、居右 使用:---------:居中\n使用:----------居左\n使用----------:居右\n第一列 第二列 第三列 第一列文本居中 第二列文本居右 第三列文本居左 SmartyPants SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\nTYPE ASCII HTML Single backticks 'Isn't this fun?' \u0026lsquo;Isn\u0026rsquo;t this fun?\u0026rsquo; Quotes \u0026quot;Isn't this fun?\u0026quot; \u0026ldquo;Isn\u0026rsquo;t this fun?\u0026rdquo; Dashes -- is en-dash, --- is em-dash \u0026ndash; is en-dash, \u0026mdash; is em-dash 创建一个自定义列表 Markdown Text-to-HTML conversion tool Authors John Luke 如何创建一个注脚 一个具有注脚的文本。2\n注释也是必不可少的 Markdown将文本转换为 HTML。\n*[HTML]: 超文本标记语言\nKaTeX数学公式 您可以使用渲染LaTeX数学表达式 KaTeX:\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$\n你可以找到更多关于的信息 LaTeX 数学表达式here.\n新的甘特图功能，丰富你的文章 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2014-01-06,2014-01-08 进行中 :active, des2, 2014-01-09, 3d 计划一 : des3, after des2, 5d 计划二 : des4, after des3, 5d 关于 甘特图 语法，参考 这儿, UML 图表 可以使用UML图表进行渲染。 Mermaid. 例如下面产生的一个序列图：:\nsequenceDiagram 张三 -\u0026gt;\u0026gt; 李四: 你好！李四, 最近怎么样? 李四--\u0026gt;\u0026gt;王五: 你最近怎么样，王五？ 李四--x 张三: 我很好，谢谢! 李四-x 王五: 我很好，谢谢! Note right of 王五: 李四想了很长时间, 文字太长了\u0026lt;br/\u0026gt;不适合放在一行. 李四--\u0026gt;张三: 打量着王五... 张三-\u0026gt;王五: 很好... 王五, 你怎么样? 这将产生一个流程图。:\ngraph LR A[长方形] -- 链接 --\u0026gt; B((圆)) A --\u0026gt; C(圆角长方形) B --\u0026gt; D{菱形} C --\u0026gt; D 关于 Mermaid 语法，参考 这儿, FLowchart流程图 我们依旧会支持flowchart的流程图：\nst=\u0026gt;start: 开始 e=\u0026gt;end: 结束 op=\u0026gt;operation: 我的操作 cond=\u0026gt;condition: 确认？ st-\u0026gt;op-\u0026gt;cond cond(yes)-\u0026gt;e cond(no)-\u0026gt;op 关于 Flowchart流程图 语法，参考 这儿. 导出与导入 导出 如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 文章导出 ，生成一个.md文件或者.html文件进行本地保存。\n导入 如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。\nmermaid语法说明\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n注脚的解释\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"","id":30,"section":"docs","tags":["Markdown"],"title":"Markdown语法中文版简易教程CSDN","uri":"https://fiix.one/docs/other/markdown%E8%AF%AD%E6%B3%95%E4%B8%AD%E6%96%87%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8Bcsdn/"},{"content":"Mitool安装配置 项目地址: https://github.com/fiixone/mitool\n下载地址: https://github.com/fiixone/mitool/releases/download/v1.0/su.zip\n一. 前言 本人严重讨厌通知栏广告，权限滥用。 每次系统更新看见有想用的功能了很是头疼，更新后部分软件重新预装。单个卸载删除太麻烦。 部分应用临时用不上，批量冻结。 登录过的WiFi给忘了密码，扫码什么的太麻烦。 需要设置Hosts,禁广告。 批量删除根目录广告、空文件夹。 纯脚本,需开启Root.自定义食用效果更佳\n二. 前期准备(必须): 部分功能个人定义的，需要用到BusyBox\n开发版用户-设置-授权管理-Root权限管理，开启Root权限。(每次升级完同样步骤)\n手机开启USB调试，电脑端运行ADB(解锁system分区)\n1 2 3 adb root adb disable-verity adb reboot now 下载Releases 文件，解压后将 su 文件夹 放在内部存储根目录 。 三. 安装 使用手机终端控制台:\nAndroid 10以后system无法有效挂载读写模式,在此创建/data/bin/,后期加入PATH即可运行\n1 2 3 4 5 6 7 # 切换到 root su # mkdir /data/bin cp /sdcard/su/mitool /data/bin/ chmod +x /data/bin/mitool 至此，工具安装完成。\n运行请输入/data/bin/mitool或者添加export PATH=$PATH:/data/bin/后直接mitool\n即可进入工具(可添加为代码片段或者短语，使用更方便)\n三. 基本目录解析 文件/文件夹名称 说明 mitool 主脚本 backup 卸载应用时将移动到此文件夹 web 简单的web server根目录 sh 批量拷贝可执行脚本的目录 app-all.list 读取系统安装的所有包 app-disable.list 需要禁用的包名 app-remove.list 需要卸载的包名 dir-clean.list 需要批量清理的文件夹名 hosts 自定义Hosts文件，我提供的里面禁止了部分广告 wifi.pw WiFi帐号密码导出文件 切记运行前注意查看上面的配置文件，避免误删！！！\n(里面有的数据是我卸载的包名)\n四. 脚本图示 在模拟终端里面su使用Root权限。\n运行mitool\n根据数字选择需要的功能即可。\n切记运行前注意修改上面的配置文件！！！\n","description":"Mitool安装配置|shell","id":31,"section":"docs","tags":["Android","Shell","Tool"],"title":"Mitool安装配置","uri":"https://fiix.one/docs/android/mitool%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"content":"Shadowsocks-install 升级软件更新系统 1 2 yum update -y yum upgrade -y 官方安装说明 安装 Debian / Ubuntu:\napt-get install python-pip pip install git+https://github.com/shadowsocks/shadowsocks.git@master CentOS:\nyum install python-setuptools \u0026amp;\u0026amp; easy_install pip pip install git+https://github.com/shadowsocks/shadowsocks.git@master CentOS 7 如果需要 AEAD 密码, 请安装 libsodium\ndnf install libsodium python34-pip pip3 install git+https://github.com/shadowsocks/shadowsocks.git@master 带有snap的Linux发行版:\nsnap install shadowsocks Windows:\n请查看: Install Shadowsocks Server on Windows.\n用法 ssserver -p 443 -k password -m aes-256-cfb 后台运行:\nsudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start 停止:\nsudo ssserver -d stop 检查日志 log:\nsudo less /var/log/shadowsocks.log 通过检查所有选项-h。您也可以改用[配置]文件。\n如果安装了snap 软件包，则必须在命令前面加上shadowsocks.，例如：\nshadowsocks.ssserver -p 443 -k password -m aes-256-cfb 使用配置文件 Create configuration file and run\n启动:\nssserver -c /etc/shadowsocks.json pip 安装说明 安装python和pip 1 2 3 4 yum install python python-pip -y\t#安装python和pip pip install shadowsocks #安装shadowsocks 如果报错,按提示升级pip pip install --upgrade pip config 配置文件需拷贝进 /etc 目录下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #多用户配置文件 vim /etc/shadowsocks.json { \u0026#34;server\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;port_password\u0026#34;: { \u0026#34;8381\u0026#34;: \u0026#34;foobar1\u0026#34;, \u0026#34;8382\u0026#34;: \u0026#34;foobar2\u0026#34;, \u0026#34;8383\u0026#34;: \u0026#34;foobar3\u0026#34;, \u0026#34;8384\u0026#34;: \u0026#34;foobar4\u0026#34; }, \u0026#34;timeout\u0026#34;: 300, \u0026#34;method\u0026#34;: \u0026#34;aes-256-cfb\u0026#34; } shadowsocks.service 1 2 vim /etc/systemd/system/shadowsocks.service #文件放置在\t/etc/systemd/system/ 目录下. 1 2 3 4 5 6 7 8 9 [Unit] Description=Shadowsocks [Service] TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install] WantedBy=multi-user.target 1 chmod +x /etc/systemd/system/shadowsocks.service 如下报错请修改 1 2 3 4 5 6 7 8 9 10 vim /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) ## 改成 libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,) libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) ## 改成 libcrypto.EVP_CIPHER_CTX_reset(self._ctx) 1 2 3 4 5 6 7 8 9 10 11 INFO: loading config from /etc/shadowsocks.json 2021-03-07 08:46:36 INFO loading libcrypto from libcrypto.so.10 2021-03-07 08:46:36 INFO starting server at 207.246.108.196:8001 Traceback (most recent call last): File \u0026#34;/usr/bin/ssserver\u0026#34;, line 11, in \u0026lt;module\u0026gt; load_entry_point(\u0026#39;shadowsocks==2.8.2\u0026#39;, \u0026#39;console_scripts\u0026#39;, \u0026#39;ssserver\u0026#39;)() File \u0026#34;/usr/lib/python3.4/site-packages/shadowsocks/server.py\u0026#34;, line 68, in main tcp_servers.append(tcprelay.TCPRelay(a_config, dns_resolver, False)) File \u0026#34;/usr/lib/python3.4/site-packages/shadowsocks/tcprelay.py\u0026#34;, line 582, in __init__ server_socket.bind(sa) OSError: [Errno 99] Cannot assign requested address 启动\u0026rsquo;停止\u0026rsquo;查看状态: 1 2 3 systemctl start shadowsocks systemctl stop shadowsocks systemctl status shadowsocks bbr加速脚本 1 ./bbr.sh\t#自动配置安装脚本. ","description":"","id":32,"section":"docs","tags":["VPS","Shadowsocks","BBR"],"title":"Shadowsock安装部署|bbr","uri":"https://fiix.one/docs/os/shadowsock%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"},{"content":"SSH登陆时带上密码 在ssh的同时带上密码，不用手动输入\n先安装一个软件包\nyum install -y sshpass\n只需要在ssh命令的前面带上sshpass就可以\nsshpass -p 'your passwd' ssh root@192.168.1.1 systemctl restart nginx\n","description":"","id":33,"section":"docs","tags":["SSH"],"title":"SSH登陆时带上密码","uri":"https://fiix.one/docs/os/ssh%E7%99%BB%E9%99%86%E6%97%B6%E5%B8%A6%E4%B8%8A%E5%AF%86%E7%A0%81/"},{"content":"SSH登录取消yes ssh登录机器的时候，如果这台机器没有使用ssh登录过(严格来说应该是~/.ssh/known_hosts文件中没有这台机器的HostKey)\nssh会产生一个提示，询问是否需 要添加这台机器的HostKey，回答yes/no即可，虽然只要不删除~/.ssh/known_hosts文件中该机器的HostKey，则这个提示 将不会出现，书写一些自动化脚本的时候，就会成为问题。\nvi /etc/ssh/ssh_config\n下面的参数默认为ask，去掉前面的注释，设置为no即可。\nStrictHostKeyChecking no\n以后ssh将会自动添加HostKey到~/.ssh/known_hosts，不会再询问。\n默认该项配置是ask，所以会询问。\n最严格的配置是yes，每次必须手动将hostkey添加到~/.ssh/known_hosts文件中。\n","description":"","id":34,"section":"docs","tags":["SSH"],"title":"SSH登录取消yes","uri":"https://fiix.one/docs/os/ssh%E7%99%BB%E5%BD%95%E5%8F%96%E6%B6%88yes/"},{"content":"Ubuntu-1804-Gnome3-自定义系统登录背景 20.04LTS个人测试无效，暂没有找到解决方法\n设置文件在/etc/alternatives/gdm3.css\n找到#lockDialogGroup 开始设置他的属性。\n注意备份\n1 2 3 4 5 6 7 #lockDialogGroup { background: #2c001e url(file:///usr/share/backgrounds/loginscreen.jpg); height: 100%; background-size: contain; background-attachment: fixed; background-position: 0px 0px; background-repeat: repeat; } 注意,请使用和显示器分辨率比例相同的图片\nPS: 图片裁剪软件，又不想装PS的话，可以用一下我自己写的剪切小工具，c#写的(vs2008)\nhttps://github.com/Sth32/cut-pic-with-2-point\n首先，介绍一下我的情况,小笔记本屏幕再带一个外置显示器.\n系统开机时自动设置两者分辨率为1920x1080，因此我的解锁的壁纸要为1920x1080的。但是小显示器太小了，这个分辨率看不清，于是在我login后，分辨率被调整为了1600x900，这时候再锁屏，如果固定了壁纸的大小，就会导致壁纸显示不完全，好在这个分辨率和上面的分辨率都是一个比例(16:9)，因此我们让壁纸自适应屏幕的高度，然后自动调整宽度，就可以在两种分辨率下达到完美显示的效果了。\n1 2 3 4 5 6 background 属性，设置壁纸的位置。 height background-size background-attachment: fixed; background-position: 0px 0px; background-repeat: repeat;\t转载于[Sth32] ","description":"","id":35,"section":"docs","tags":["Ubuntu","登录背景"],"title":"Ubuntu-1804-Gnome3-自定义系统登录背景","uri":"https://fiix.one/docs/os/ubuntu/ubuntu%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E8%83%8C%E6%99%AF/"},{"content":"Ubuntu清除卸载后的包数据 单独卸载包时清除配置 1 2 sudo apt-get 包名 --purge sudo apt-get purge 包名 卸载系统全部不用的包 1 sudo apt-get autoremove --purge 清除全部已卸载的包配置文件 1 sudo dpkg -l |grep ^rc|awk \u0026#39;{print $2}\u0026#39; |sudo xargs dpkg -P ","description":"","id":36,"section":"docs","tags":["Ubuntu","Bash","卸载"],"title":"Ubuntu清除卸载后的软件包数据","uri":"https://fiix.one/docs/os/ubuntu/ubuntu%E6%B8%85%E9%99%A4%E5%8D%B8%E8%BD%BD%E5%90%8E%E7%9A%84%E5%8C%85%E6%95%B0%E6%8D%AE/"},{"content":"V2ray一键安装 Debian8/Debian7/Ubuntu16/Ubuntu14/centos7 v2ray一键部署管理脚本：\n安装脚本命令：\nbash \u0026lt;(curl -s -L https://git.io/v2ray.sh) 卸载脚本命令：\nbash \u0026lt;(curl -s -L https://git.io/v2ray.sh) 快速管理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 v2ray info 查看 V2Ray 配置信息 v2ray config 修改 V2Ray 配置 v2ray link 生成 V2Ray 配置文件链接 v2ray infolink 生成 V2Ray 配置信息链接 v2ray qr 生成 V2Ray 配置二维码链接 v2ray ss 修改 Shadowsocks 配置 v2ray ssinfo 查看 Shadowsocks 配置信息 v2ray ssqr 生成 Shadowsocks 配置二维码链接 v2ray status 查看 V2Ray 运行状态 v2ray start 启动 V2Ray v2ray stop 停止 V2Ray v2ray restart 重启 V2Ray v2ray log 查看 V2Ray 运行日志 v2ray update 更新 V2Ray v2ray update.sh 更新 V2Ray 管理脚本 v2ray uninstall 卸载 V2Ray 安装bbr加速 1 2 3 wget --no-check-certificate https://github.com/teddysun/across/raw/master /bbr.sh chmod +x bbr.sh ./bbr.sh ","description":"","id":37,"section":"docs","tags":["VPS","V2ray","BBR"],"title":"V2ray一键安装|bbr加速","uri":"https://fiix.one/docs/os/v2ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/"},{"content":"VPS开启BBR加速 命令行终端： 1 2 3 wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。\n重启完成后，进入 VPS.\n验证是否成功安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 uname -r 查看内核版本，含有 4.13 就表示OK 了 sysctl net.ipv4.tcp_available_congestion_control 返回值一般为： net.ipv4.tcp_available_congestion_control =bbr cubic reno sysctl net.ipv4.tcp_congestion_control 返回值一般为： net.ipv4.tcp_congestion_control = bbr sysctl net.core.default_qdisc 返回值一般为： net.core.default_qdisc = fq lsmod | grep bbr 返回值有 tcp_bbr 模块即说明bbr已启动。 ","description":"","id":38,"section":"docs","tags":["VPS","BBR"],"title":"VPS开启bbr加速","uri":"https://fiix.one/docs/os/vps%E5%BC%80%E5%90%AFbbr%E5%8A%A0%E9%80%9F/"},{"content":"vsftpd主目录权限（无法写入,连接失败） 当限定了用户不能跳出其主目录之后，使用该用户登录FTP时往往会遇到这个错误：\n500 OOPS: vsftpd: refusing to run with writable root inside chroot () 这个问题发生在最新的这是由于下面的更新造成的：\nAdd stronger checks for the configuration error of running with a writeable root directory inside a chroot(). This may bite people who carelessly turned on chroot_local_user but such is life.\n从2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。\n要修复这个错误，可以用命令\nchmod a-w /home/user #去除用户主目录的写权限，注意把目录替换成你自己的。 或者你可以在vsftpd.conf的配置文件中增加下列两项中的一项：\nallow_writeable_chroot=YES ","description":"","id":39,"section":"docs","tags":["vsftp","centos","ftp"],"title":"vsftpd主目录权限（无法写入,连接失败）解决方法","uri":"https://fiix.one/docs/os/vsftpd%E4%B8%BB%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/"},{"content":"personal wiki! Wikitten is a small, fast, PHP wiki that I made because I really needed a place to store my notes, snippets, ideas, and so on. I\u0026rsquo;ve tried a lot of personal wikis and note-taking applications in the past, but since I have peculiar needs, none of them really suited me, so I rolled my own.\nThe page you are looking at right now is part of the actual wiki, and is written using the Markdown syntax. If you\u0026rsquo;re not familiar with Markdown go ahead, press the Toggle source button in the upper right corner, or check out the sample document in the sidebar. By the way, if you\u0026rsquo;re reading the source, noticed how I linked to another page within the wiki?\nNow, there are other Markdown-powered wikis out there, and I\u0026rsquo;ve tried some of them, but I wanted something that I could use to store my code snippets too, so syntax highlighting was a must. Expand the Code snippets folder in the sidebar and take a look at some of the supported file types. I also needed something light enough that I could sync on Dropbox, because I access my notes and snippets on multiple machines.\nRequirements PHP 5.3+ The Apache webserver (with mod_rewrite) or\nPHP 5.4 Inbuilt webserver php -S 0.0.0.0:8000 routing.php Installation Download the latest version or clone the repository on GitHub After extracting the archive, drop the files somewhere in your DocumentRoot, or make a separate Apache VirtualHost (this is the way I currently use it myself) That\u0026rsquo;s it. There\u0026rsquo;s a library directory in the installation folder. Everything you place in there will be rendered by the wiki. If there\u0026rsquo;s an index.md file (such as the one you are reading now) in that folder, it will be served by default when accessing the wiki. You can also run the wiki using Docker\nConfigure Wikitten You are able to configure Wikitten by using the config file.\nFirst, copy the config.php.example to config.php and you are ready to change the settings.\nSome options are disabled with a comment but can be enabled by removing // from the option line.\ndefine('APP_NAME', 'My Wiki'); - Set the Wiki title define('DEFAULT_FILE', 'index.md'); - Choose the file that should be loaded as the homepage, must be located in library folder define('LIBRARY', '/path/to/wiki/library'); - Set a custom path to the library define('ENABLE_EDITING', true); - Enable the in-page editing of any files define('USE_PAGE_METADATA', true); - Enable the JSON Front Matter (meta data), see below for more details define('USE_DARK_THEME', true); - Enable the dark theme (see below for a screenshot) define('USE_WIKITTEN_LOGO', false); - Disable the Wikitten logo on the left bottom JSON Front Matter (meta data) Wikitten content can also be tagged using a simple but powerful JSON Front Matter system, akin to Jekyll\u0026rsquo;s YAML Front Matter. Defining a custom title, tags, or other\nrelevant data for a specific page is just a matter of adding a special header at the start of your files, like so:\n---\r\u0026quot;title\u0026quot;: \u0026quot;My Custom Page Title\u0026quot;,\r\u0026quot;tags\u0026quot;: [\u0026quot;my\u0026quot;, \u0026quot;custom\u0026quot;, \u0026quot;tags\u0026quot;],\r\u0026quot;author\u0026quot;: \u0026quot;Bob\u0026quot;\r---\r# Hello, world!\rThis is my cool wiki page.\rWikitten will intelligently grab this data, and use it for things like meta keywords, the\npage title, and maybe eventually search indexing. All the information provided in this\nheader is passed as-is to the views, so future components and plugins may also make use of it.\nNote: The JSON header is expected to be a JSON hash, but to simplify things, Wikitten lets you leave out the starting an ending { } brackets if you want. Everything else in the JSON syntax still applies:\nStrings (i.e: title must be written within double quotes: \u0026quot;title\u0026quot;) Values must be seperated with a comma character, even if its the only value in a line. Dark Theme If you are working until midnight it can be a pain to look at bright white backgrounds. That\u0026rsquo;s why Wikitten offers a Dark Theme which can be enabled in the config.php file with the define('USE_DARK_THEME', true); option.\nIt looks like this:\nRoadmap Some of the features I plan to implement next:\nPastebin API integration. I think it would be cool to share snippets on Pastebin (or a similar service) with a single click Creating / updating files directly through the web interface. Other wikis place great accent on creating and editing pages in the browser, but since I have my trusty code editor open non-stop anyway, I prefer to update my files manually for now. Search in files Special thanks go to: Michel Fortin, for the PHP Markdown parser. Marijn Haverbeke, for CodeMirror, a JavaScript code editor. Twitter, for the Bootstrap CSS framework. All Vectors, for the free cat vector silhouette I used in making the logo. ","description":"","id":40,"section":"docs","tags":["Wiki"],"title":"Wikitten官方文档","uri":"https://fiix.one/docs/other/wikitten%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"},{"content":"Win-CMD运行命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 taskmgr--------任务管理器 explorer-------打开资源管理器 osk------------打开屏幕键盘 notepad--------打开记事本 calc-----------启动计算器 cleanmgr-------垃圾整理 sndrec32-------录音机 conf-----------启动netmeeting syncapp--------创建一个公文包 dvdplay--------DVD播放器 eudcedit-------造字程序 charmap--------启动字符映射表 winchat--------XP自带局域网聊天 write----------写字板 winmsd---------系统信息 wiaacmgr-------扫描仪和照相机向导 winchat--------XP自带局域网聊天 mem.exe--------显示内存使用情况 Msconfig.exe---系统配置实用程序 mplayer2-------简易widnows media player mspaint--------画图板 mstsc----------远程桌面连接 mplayer2-------媒体播放机 magnify--------放大镜实用程序 cliconfg-------SQL SERVER 客户端网络实用程序 Clipbrd--------剪贴板查看器 narrator-------屏幕“讲述人” net start messenger----开始信使服务 net stop messenger-----停止信使服务 shrpubw--------创建共享文件夹 services.msc---本地服务设置 Sndvol32-------音量控制程序 rsop.msc-------组策略结果集 gpedit.msc-----组策略 fsmgmt.msc-----共享文件夹管理器 lusrmgr.msc----本机用户和组 compmgmt.msc---计算机管理 devmgmt.msc--- 设备管理器 perfmon.msc----计算机性能监测程序 ciadv.msc------索引服务程序 dfrg.msc-------磁盘碎片整理程序 diskmgmt.msc---磁盘管理实用程序 ntmsmgr.msc----移动存储管理器 ntmsoprq.msc---移动存储管理员操作请求 wmimgmt.msc----打开windows管理体系结构(WMI) cmd.exe--------CMD命令提示符 regedit.exe----注册表 regedt32-------注册表编辑器 regsvr32 /u *.dll----停止dll文件运行 regsvr32 /u zipfldr.dll------取消ZIP支持 nslookup-------IP地址侦测器 logoff---------注销命令 rononce -p ----15秒关机 tsshutdn-------60秒倒计时关机命令 cleanmgr-------垃圾整理 chkdsk.exe-----Chkdsk磁盘检查 dxdiag---------检查DirectX信息 Msconfig.exe---系统配置实用程序 mem.exe--------显示内存使用情况 mmc------------打开控制台 mobsync--------同步命令 oobe/msoobe /a----检查XP是否激活 regsvr32 /u *.dll----停止dll文件运行 drwtsn32------ 系统医生 progman--------程序管理器 winmsd---------系统信息 winver---------检查Windows版本 sfc /scannow-----扫描错误并复原 ntbackup-------系统备份和还原 wupdmgr--------windows更新程序 wscript--------windows脚本宿主设置 dcomcnfg-------打开系统组件服务 ddeshare-------打开DDE共享设置 netstat -an----(TC)命令检查接口 sysedit--------系统配置编辑器 sigverif-------文件签名验证程序 secpol.msc-----本地安全策略 syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码 sfc.exe--------系统文件检查器 sfc /scannow---windows文件保护 tourstart------xp简介（安装完成后出现的漫游xp程序） eventvwr-------事件查看器 packager-------对象包装程序 perfmon.msc----计算机性能监测程序 progman--------程序管理器 certmgr.msc----证书管理实用程序 odbcad32-------ODBC数据源管理器 iexpress-------木马捆绑工具，系统自带 utilman--------辅助工具管理器 ","description":"Win|CMD|命令","id":41,"section":"docs","tags":["Cmd"],"title":"Win-CMD运行命令","uri":"https://fiix.one/docs/os/windows/win-cmd%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4/"},{"content":"Linux系统主机分辨率调节/投屏/双屏 xrandr 指令可以用来改变X环境的桌面大小和屏幕频率 xrandr: 列出目前环境支持的解析度和频率 xrandr -q: 同上 ，当前使用的分辨率会带上 “ * “ 号 xrandr和cvt命令添加自定义的分辨率模式 使用xrandr -q命令查看当前支持的分辨率模式: 例如,需要创建800x750的分辨率模式,步骤如下:\n使用cvt命令创建新的分辨率: cvt 800 750\n使用xrandr -newmode modeline信息(cvt命令产生的结果) 创建新的mode: xrandr --newmode \u0026quot;800X750_60.00\u0026quot; 48.50 800 840 920 1040 750 753 763 779 -hsync +vsync\nxrandr -addmode 设备名 mode 来为设备添加新的mode: xrandr -addmode VGA-1 800X750_60.00\n使用xrandr -out 设备名 -mode mode 来使用新的分辨率模式 xrand -out VGA-1 -mode 800X750_60.00\n以上步骤只是临时添加了新的分辨率,重启后就会消失,要永久保存,需要将modeline的信息保存到配置文件中.\n更改分辨率 xrandr -s 1024x768 这种方式可以 xrandr -s n (n: xrandr 列出来的模式对应的数字) 这种方式也是可以的\n用法举例：xrandr -s 1024x768 -r 75\n这样就可以将显示器的分辨率和刷新率立即更改为1024x768＠75，注意1024x768中间一定要是x不可以是*.\n设置分辨率时需要指定设置的output及mode，如将eDP1的分辨率改为1920x1080，命令就是：\nxrandr --output eDP1 --mode 1920x1080 --output:指定显示器。 --mode:指定一种有效的分辨率。 --rate:指定刷新率。 电脑的分辨率必须和投影率的分辨率相同，才能正常使用\n将笔记本屏慕内容克隆到屏幕\nxrandr --output VGA --same-as LVDS --auto (LVDS:代表笔记本液晶屏)\nxrandr 命令行切换双屏 常用方式如下，其他的可以自己探索：\n打开外接显示器(最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆） xrandr --output VGA --same-as LVDS --auto\n打开外接显示器(分辨率为1024x768)，与笔记本液晶屏幕显示同样内容（克隆） xrandr --output VGA --same-as LVDS --mode 1024x768\n* 打开外接显示器(最高分辨率)，设置为右侧扩展屏幕\nxrandr --output VGA --right-of LVDS --auto\n*关闭外接显示器\nxrandr --output VGA --off\n打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作） xrandr --output VGA --auto --output LVDS --off\n* 关闭外接显示器，同时打开笔记本液晶屏幕 (只用笔记本液晶屏)\nxrandr --output VGA --off --output LVDS --auto\n","description":"","id":42,"section":"docs","tags":["xrand","Linux","分辨率","投屏"],"title":"xrandr命令/投屏/双屏/扩展/分辨率调节","uri":"https://fiix.one/docs/os/xrandr%E5%91%BD%E4%BB%A4%E6%8A%95%E5%B1%8F%E5%92%8C%E6%89%A9%E5%B1%95/"},{"content":" 1 getprop |grep dns ","description":"","id":43,"section":"docs","tags":["Bash","DNS"],"title":"查看DNS","uri":"https://fiix.one/docs/android/%E6%9F%A5%E7%9C%8Bdns/"},{"content":"树莓派初始配置 配置Wifi接入 wpa_supplicant.conf是linux无线网络管理软件wpa_supplicant的配置文件，该文件记录了无线网络的配置情况。\nvim /etc/wpa_supplicant/wpa_supplicant.conf 其中ssid为wifi名称，psk为wifi密码\n添加 network 节点，添加后文件内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 country=GB ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 ##在此处之后添加 network={ ssid=\u0026#34;Honor 10\u0026#34; psk=\u0026#34;zyj123#..\u0026#34; priority=5 } network={ ssid=\u0026#34;company\u0026#34; psk=\u0026#34;companyPwd\u0026#34; priority=4 } 其中priority为优先级，值越大，优先级越高。\n静态IP设置(Wifi和有线) 在 interfaces 文件的开头注释里告诉我们了要修改静态IP地址，需要修改的是 /etc/dhcpcd.conf 也就是 DHCP 的配置文件。\n查看官方文档 man dhcpcd.conf 可知，需要配置 static IP 的话，只需修改以下参数：\nvi /etc/dhcpcd.conf 1 2 3 4 5 6 7 8 9 10 # 使用 vi 编辑文件，增加下列配置项 # 指定接口 eth0　或者 wlan0 interface eth0 # 指定静态IP，/24表示子网掩码为 255.255.255.0 static ip_address=192.168.1.20/24 # 路由器/网关IP地址 static routers=192.168.1.1 # 手动自定义DNS服务器 static domain_name_servers=192.168.1.1 114.114.114.114 # 修改完成后，按esc键后输入 :wq 保存。重启树莓派就生效了 查看CPU温度 sudo cat/sys/class/thermal/thermal_zone0/temp HDMI热拔插/增强设置 树莓派有两个视频输出源（HDMI、模拟复合视频）。从原理上，HDMI口可以检测显示设备的有无及分辨率，模拟视频只能单纯输出，对目标设备没有任何检测（可以理解为开环）。\n不能双头同时输出，开机时的策略是有HDMI则HDMI优先，无则退化到模拟视频。\n可以通过修改config.txt来改动。设置hdmi_force_hotplug=1可以强制系统认为HDMI接口有设备插入。\n找到#hdmi_force_hotplug=1这句话，把前面的#注释符号去掉，启用HDMI热插拔功能。\n找到#config_hdmi_boost=4这句话，把前面的#注释符号去掉，启用加强HDMI信号。\n注意强制HDMI输出时，树莓派不知道对面的显示设备是什么。\n强制分辨率显示 所以你可能有必要用hdmi_group和hdmi_mode选项手动指定显示分辨率\n找到#hdmi_group=1这句话，把前面的#注释符号去掉,强行指定显示器类型：\n1是连接老式电视，2代表连接新电视.\n配置 hdmi_safe = 1，可以显示，可是屏幕分辨率一直只有640 * 480。\nhdmi_safe = 1强制使分辨率为640 * 480。\n1 2 /opt/vc/bin/tvservice -m CEA ＃CEA老屏幕，hdmi_group = 1 /opt/vc/bin/tvservice -m DMT ＃新屏幕 hdmi_group = 2 查看屏幕支持的分辨率\n/boot/config.txt 里面设置如下\nhdmi_group=2 #设置为新式电视模式 hdmi_mode=27 #选择合适的分辨率 \u0026quot;mode 码\u0026quot; 强制竖屏 display_rotate=1 ","description":"Pi|Raspberrypi|树莓派初始设置","id":44,"section":"docs","tags":["树莓派","Wifi","静态IP","Hdmi","分辨率"],"title":"树莓派初始配置","uri":"https://fiix.one/docs/os/raspberry/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/"},{"content":"树莓派设置AP 输入如下命令:\n1 iw list 输出内容包涵AP则支持AP模式\nip neigh 查看手机热点分配IP\n","description":"Pi|Raspberrypi|树莓派AP","id":45,"section":"docs","tags":["树莓派","Wifi","AP"],"title":"树莓派设置AP","uri":"https://fiix.one/docs/os/raspberry/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E5%92%8Cap/"},{"content":"树莓派引脚图 官方文档地址: https://www.raspberrypi.com/documentation/\n硬件及原理图: https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#schematics-and-mechanical-drawings\n一. Pi-Zero-W 二. Pi-3B/3B+ 三. Pi-4B ","description":"Pi|Raspberrypi|树莓派引脚图","id":46,"section":"docs","tags":["树莓派","引脚图"],"title":"树莓派引脚图","uri":"https://fiix.one/docs/os/raspberry/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%95%E8%84%9A%E5%9B%BE/"},{"content":"$\n匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n\u0026rsquo; 或 ‘\\r\u0026rsquo;。要匹配 $ 字符本身，请使用 $。\n( )\n标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 。\n*\n匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。\n+\n匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。\n. 匹配除换行符 \\n之外的任何单字符。要匹配 .，请使用 \\。\n[ ]\n标记一个中括号表达式的开始。要匹配 [，请使用 [。\n?\n匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。\n/\\\n将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n\u0026rsquo; 匹配字符 ‘n\u0026rsquo;。\u0026rsquo;\\n\u0026rsquo; 匹配换行符。序列 ‘\\\u0026rsquo; 匹配 “\\”，而 ‘(\u0026rsquo; 则匹配 “(”。\n^\n匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。\n{ }\n标记限定符表达式的开始。要匹配 {，请使用 {。\n|\n指明两项之间的一个选择。要匹配 |，请使用 |。\n","description":"","id":47,"section":"docs","tags":["正则匹配","转义字符"],"title":"正则匹配中需要转义的字符","uri":"https://fiix.one/docs/os/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E4%B8%AD%E9%9C%80%E8%A6%81%E8%BD%AC%E4%B9%89%E7%9A%84%E5%AD%97%E7%AC%A6/"}]